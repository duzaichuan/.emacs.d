#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((owner (login . "duzaichuan")) (name . ".emacs.d"))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 123483439) (node_id . "MDEwOlJlcG9zaXRvcnkxMjM0ODM0Mzk=") (name . ".emacs.d") (full_name . "duzaichuan/.emacs.d") (private) (owner (login . "duzaichuan") (id . 32022901) (node_id . "MDQ6VXNlcjMyMDIyOTAx") (avatar_url . "https://avatars1.githubusercontent.com/u/32022901?v=4") (gravatar_id . "") (url . "https://api.github.com/users/duzaichuan") (html_url . "https://github.com/duzaichuan") (followers_url . "https://api.github.com/users/duzaichuan/followers") (following_url . "https://api.github.com/users/duzaichuan/following{/other_user}") (gists_url . "https://api.github.com/users/duzaichuan/gists{/gist_id}") (starred_url . "https://api.github.com/users/duzaichuan/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/duzaichuan/subscriptions") (organizations_url . "https://api.github.com/users/duzaichuan/orgs") (repos_url . "https://api.github.com/users/duzaichuan/repos") (events_url . "https://api.github.com/users/duzaichuan/events{/privacy}") (received_events_url . "https://api.github.com/users/duzaichuan/received_events") (type . "User") (site_admin)) (html_url . "https://github.com/duzaichuan/.emacs.d") (description . "dotemacs.d") (fork) (url . "https://api.github.com/repos/duzaichuan/.emacs.d") (forks_url . "https://api.github.com/repos/duzaichuan/.emacs.d/forks") (keys_url . "https://api.github.com/repos/duzaichuan/.emacs.d/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/duzaichuan/.emacs.d/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/duzaichuan/.emacs.d/teams") (hooks_url . "https://api.github.com/repos/duzaichuan/.emacs.d/hooks") (issue_events_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues/events{/number}") (events_url . "https://api.github.com/repos/duzaichuan/.emacs.d/events") (assignees_url . "https://api.github.com/repos/duzaichuan/.emacs.d/assignees{/user}") (branches_url . "https://api.github.com/repos/duzaichuan/.emacs.d/branches{/branch}") (tags_url . "https://api.github.com/repos/duzaichuan/.emacs.d/tags") (blobs_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/refs{/sha}") (trees_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/duzaichuan/.emacs.d/statuses/{sha}") (languages_url . "https://api.github.com/repos/duzaichuan/.emacs.d/languages") (stargazers_url . "https://api.github.com/repos/duzaichuan/.emacs.d/stargazers") (contributors_url . "https://api.github.com/repos/duzaichuan/.emacs.d/contributors") (subscribers_url . "https://api.github.com/repos/duzaichuan/.emacs.d/subscribers") (subscription_url . "https://api.github.com/repos/duzaichuan/.emacs.d/subscription") (commits_url . "https://api.github.com/repos/duzaichuan/.emacs.d/commits{/sha}") (git_commits_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/commits{/sha}") (comments_url . "https://api.github.com/repos/duzaichuan/.emacs.d/comments{/number}") (issue_comment_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues/comments{/number}") (contents_url . "https://api.github.com/repos/duzaichuan/.emacs.d/contents/{+path}") (compare_url . "https://api.github.com/repos/duzaichuan/.emacs.d/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/duzaichuan/.emacs.d/merges") (archive_url . "https://api.github.com/repos/duzaichuan/.emacs.d/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/duzaichuan/.emacs.d/downloads") (issues_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues{/number}") (pulls_url . "https://api.github.com/repos/duzaichuan/.emacs.d/pulls{/number}") (milestones_url . "https://api.github.com/repos/duzaichuan/.emacs.d/milestones{/number}") (notifications_url . "https://api.github.com/repos/duzaichuan/.emacs.d/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/duzaichuan/.emacs.d/labels{/name}") (releases_url . "https://api.github.com/repos/duzaichuan/.emacs.d/releases{/id}") (deployments_url . "https://api.github.com/repos/duzaichuan/.emacs.d/deployments") (created_at . "2018-03-01T19:37:14Z") (updated_at . "2018-10-18T21:13:27Z") (pushed_at . "2018-10-18T21:13:26Z") (git_url . "git://github.com/duzaichuan/.emacs.d.git") (ssh_url . "git@github.com:duzaichuan/.emacs.d.git") (clone_url . "https://github.com/duzaichuan/.emacs.d.git") (svn_url . "https://github.com/duzaichuan/.emacs.d") (homepage . "https://github.com/duzaichuan/.emacs.d") (size . 16818) (stargazers_count . 0) (watchers_count . 0) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 0) (mirror_url) (archived) (open_issues_count . 0) (license) (forks . 0) (open_issues . 0) (watchers . 0) (default_branch . "master") (permissions (admin . t) (push . t) (pull . t)) (allow_squash_merge . t) (allow_merge_commit . t) (allow_rebase_merge . t) (network_count . 0) (subscribers_count . 0)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues (quote ((id . 123483439) (node_id . "MDEwOlJlcG9zaXRvcnkxMjM0ODM0Mzk=") (name . ".emacs.d") (full_name . "duzaichuan/.emacs.d") (private) (owner (login . "duzaichuan") (id . 32022901) (node_id . "MDQ6VXNlcjMyMDIyOTAx") (avatar_url . "https://avatars1.githubusercontent.com/u/32022901?v=4") (gravatar_id . "") (url . "https://api.github.com/users/duzaichuan") (html_url . "https://github.com/duzaichuan") (followers_url . "https://api.github.com/users/duzaichuan/followers") (following_url . "https://api.github.com/users/duzaichuan/following{/other_user}") (gists_url . "https://api.github.com/users/duzaichuan/gists{/gist_id}") (starred_url . "https://api.github.com/users/duzaichuan/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/duzaichuan/subscriptions") (organizations_url . "https://api.github.com/users/duzaichuan/orgs") (repos_url . "https://api.github.com/users/duzaichuan/repos") (events_url . "https://api.github.com/users/duzaichuan/events{/privacy}") (received_events_url . "https://api.github.com/users/duzaichuan/received_events") (type . "User") (site_admin)) (html_url . "https://github.com/duzaichuan/.emacs.d") (description . "dotemacs.d") (fork) (url . "https://api.github.com/repos/duzaichuan/.emacs.d") (forks_url . "https://api.github.com/repos/duzaichuan/.emacs.d/forks") (keys_url . "https://api.github.com/repos/duzaichuan/.emacs.d/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/duzaichuan/.emacs.d/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/duzaichuan/.emacs.d/teams") (hooks_url . "https://api.github.com/repos/duzaichuan/.emacs.d/hooks") (issue_events_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues/events{/number}") (events_url . "https://api.github.com/repos/duzaichuan/.emacs.d/events") (assignees_url . "https://api.github.com/repos/duzaichuan/.emacs.d/assignees{/user}") (branches_url . "https://api.github.com/repos/duzaichuan/.emacs.d/branches{/branch}") (tags_url . "https://api.github.com/repos/duzaichuan/.emacs.d/tags") (blobs_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/refs{/sha}") (trees_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/duzaichuan/.emacs.d/statuses/{sha}") (languages_url . "https://api.github.com/repos/duzaichuan/.emacs.d/languages") (stargazers_url . "https://api.github.com/repos/duzaichuan/.emacs.d/stargazers") (contributors_url . "https://api.github.com/repos/duzaichuan/.emacs.d/contributors") (subscribers_url . "https://api.github.com/repos/duzaichuan/.emacs.d/subscribers") (subscription_url . "https://api.github.com/repos/duzaichuan/.emacs.d/subscription") (commits_url . "https://api.github.com/repos/duzaichuan/.emacs.d/commits{/sha}") (git_commits_url . "https://api.github.com/repos/duzaichuan/.emacs.d/git/commits{/sha}") (comments_url . "https://api.github.com/repos/duzaichuan/.emacs.d/comments{/number}") (issue_comment_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues/comments{/number}") (contents_url . "https://api.github.com/repos/duzaichuan/.emacs.d/contents/{+path}") (compare_url . "https://api.github.com/repos/duzaichuan/.emacs.d/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/duzaichuan/.emacs.d/merges") (archive_url . "https://api.github.com/repos/duzaichuan/.emacs.d/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/duzaichuan/.emacs.d/downloads") (issues_url . "https://api.github.com/repos/duzaichuan/.emacs.d/issues{/number}") (pulls_url . "https://api.github.com/repos/duzaichuan/.emacs.d/pulls{/number}") (milestones_url . "https://api.github.com/repos/duzaichuan/.emacs.d/milestones{/number}") (notifications_url . "https://api.github.com/repos/duzaichuan/.emacs.d/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/duzaichuan/.emacs.d/labels{/name}") (releases_url . "https://api.github.com/repos/duzaichuan/.emacs.d/releases{/id}") (deployments_url . "https://api.github.com/repos/duzaichuan/.emacs.d/deployments") (created_at . "2018-03-01T19:37:14Z") (updated_at . "2018-10-18T21:13:27Z") (pushed_at . "2018-10-18T21:13:26Z") (git_url . "git://github.com/duzaichuan/.emacs.d.git") (ssh_url . "git@github.com:duzaichuan/.emacs.d.git") (clone_url . "https://github.com/duzaichuan/.emacs.d.git") (svn_url . "https://github.com/duzaichuan/.emacs.d") (homepage . "https://github.com/duzaichuan/.emacs.d") (size . 16818) (stargazers_count . 0) (watchers_count . 0) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 0) (mirror_url) (archived) (open_issues_count . 0) (license) (forks . 0) (open_issues . 0) (watchers . 0) (default_branch . "master") (permissions (admin . t) (push . t) (pull . t)) (allow_squash_merge . t) (allow_merge_commit . t) (allow_rebase_merge . t) (network_count . 0) (subscribers_count . 0))))))) nil (nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((owner (login . "clojure-emacs")) (name . "clojure-mode"))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 85632) (node_id . "MDEwOlJlcG9zaXRvcnk4NTYzMg==") (name . "clojure-mode") (full_name . "clojure-emacs/clojure-mode") (private) (owner (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/clojure-emacs/clojure-mode") (description . "Emacs support for the Clojure(Script) programming language") (fork) (url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (forks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/forks") (keys_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/teams") (hooks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/hooks") (issue_events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/events{/number}") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/events") (assignees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/assignees{/user}") (branches_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/branches{/branch}") (tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/tags") (blobs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/statuses/{sha}") (languages_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/languages") (stargazers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/stargazers") (contributors_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contributors") (subscribers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscribers") (subscription_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscription") (commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contents/{+path}") (compare_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/merges") (archive_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/downloads") (issues_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues{/number}") (pulls_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls{/number}") (milestones_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/milestones{/number}") (notifications_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels{/name}") (releases_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/releases{/id}") (deployments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/deployments") (created_at . "2008-12-05T17:45:07Z") (updated_at . "2018-10-14T22:28:13Z") (pushed_at . "2018-10-12T13:26:20Z") (git_url . "git://github.com/clojure-emacs/clojure-mode.git") (ssh_url . "git@github.com:clojure-emacs/clojure-mode.git") (clone_url . "https://github.com/clojure-emacs/clojure-mode.git") (svn_url . "https://github.com/clojure-emacs/clojure-mode") (homepage . "") (size . 1435) (stargazers_count . 664) (watchers_count . 664) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 196) (mirror_url) (archived) (open_issues_count . 30) (license) (forks . 196) (open_issues . 30) (watchers . 664) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (network_count . 196) (subscribers_count . 56)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues (quote ((id . 85632) (node_id . "MDEwOlJlcG9zaXRvcnk4NTYzMg==") (name . "clojure-mode") (full_name . "clojure-emacs/clojure-mode") (private) (owner (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/clojure-emacs/clojure-mode") (description . "Emacs support for the Clojure(Script) programming language") (fork) (url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (forks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/forks") (keys_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/teams") (hooks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/hooks") (issue_events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/events{/number}") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/events") (assignees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/assignees{/user}") (branches_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/branches{/branch}") (tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/tags") (blobs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/statuses/{sha}") (languages_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/languages") (stargazers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/stargazers") (contributors_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contributors") (subscribers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscribers") (subscription_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscription") (commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contents/{+path}") (compare_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/merges") (archive_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/downloads") (issues_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues{/number}") (pulls_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls{/number}") (milestones_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/milestones{/number}") (notifications_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels{/name}") (releases_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/releases{/id}") (deployments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/deployments") (created_at . "2008-12-05T17:45:07Z") (updated_at . "2018-10-14T22:28:13Z") (pushed_at . "2018-10-12T13:26:20Z") (git_url . "git://github.com/clojure-emacs/clojure-mode.git") (ssh_url . "git@github.com:clojure-emacs/clojure-mode.git") (clone_url . "https://github.com/clojure-emacs/clojure-mode.git") (svn_url . "https://github.com/clojure-emacs/clojure-mode") (homepage . "") (size . 1435) (stargazers_count . 664) (watchers_count . 664) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 196) (mirror_url) (archived) (open_issues_count . 30) (license) (forks . 196) (open_issues . 30) (watchers . 664) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (network_count . 196) (subscribers_count . 56))))))) (((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/494") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/494/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/494/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/494/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/494") (id . 369949967) (node_id . "MDU6SXNzdWUzNjk5NDk5Njc=") (number . 494) (title . "Fix compilation warnings") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (labels ((id . 1068248483) (node_id . "MDU6TGFiZWwxMDY4MjQ4NDgz") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/good%20first%20issue") (name . "good first issue") (color . "ffccd2") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2018-10-14T22:18:03Z") (updated_at . "2018-10-14T22:18:13Z") (closed_at) (author_association . "MEMBER") (body . "```
Compiling /home/jonas/.emacs.d/lib/clojure-mode/clojure-mode.el...

In toplevel form:
clojure-mode.el:476:1:Warning: Unused lexical argument ‘args’
clojure-mode.el:476:1:Warning: Unused lexical argument ‘orig-fun’

In clojure--replace-let-bindings-and-indent:
clojure-mode.el:487:12:Warning: looking-back called with 1 argument, but
    requires 2-3
clojure-mode.el:2023:1:Warning: Unused lexical variable
    ‘clojure-comment-start’
clojure-mode.el:2083:1:Warning: Unused lexical variable ‘beg’

In clojure-cycle-not:
clojure-mode.el:2426:10:Warning: looking-back called with 1 argument, but
    requires 2-3
clojure-mode.el:2640:1:Warning: Unused lexical variable ‘k’
```

See https://github.com/tarsius/hl-todo/issues/30 for details. ")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/493") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/493/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/493/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/493/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/pull/493") (id . 369550892) (node_id . "MDExOlB1bGxSZXF1ZXN0MjIyNDY1OTQx") (number . 493) (title . "Handle unbalanced parens in custom beginning of defun fn") (user (login . "dpsutton") (id . 6377293) (node_id . "MDQ6VXNlcjYzNzcyOTM=") (avatar_url . "https://avatars2.githubusercontent.com/u/6377293?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dpsutton") (html_url . "https://github.com/dpsutton") (followers_url . "https://api.github.com/users/dpsutton/followers") (following_url . "https://api.github.com/users/dpsutton/following{/other_user}") (gists_url . "https://api.github.com/users/dpsutton/gists{/gist_id}") (starred_url . "https://api.github.com/users/dpsutton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dpsutton/subscriptions") (organizations_url . "https://api.github.com/users/dpsutton/orgs") (repos_url . "https://api.github.com/users/dpsutton/repos") (events_url . "https://api.github.com/users/dpsutton/events{/privacy}") (received_events_url . "https://api.github.com/users/dpsutton/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2018-10-12T13:26:19Z") (updated_at . "2018-10-12T13:26:19Z") (closed_at) (author_association . "CONTRIBUTOR") (pull_request (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls/493") (html_url . "https://github.com/clojure-emacs/clojure-mode/pull/493") (diff_url . "https://github.com/clojure-emacs/clojure-mode/pull/493.diff") (patch_url . "https://github.com/clojure-emacs/clojure-mode/pull/493.patch")) (body . "Paredit has some strange logic. It inserts its opening \"(\" and then tasks itself
with discovering whether it is in a comment or string before inserting its
closing \")\". But this means that paredit _by design_ calls functions on
unbalanced parens states and I don't know why they do this.

If we find a scan-error, this bails and lets the default beginning of defun
function shoulder that logic.

- [x] The commits are consistent with our [contribution guidelines][1].
- [x] You've added tests (if possible) to cover your change(s). Bugfix, indentation, and font-lock tests are extremely important!
- [x] You've run `M-x checkdoc` and fixed any warnings in the code you've written.
- [x] You've updated the changelog (if adding/changing user-visible functionality).
- [x] You've updated the readme (if adding/changing user-visible functionality).

Thanks!
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/492") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/492/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/492/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/492/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/492") (id . 366663948) (node_id . "MDU6SXNzdWUzNjY2NjM5NDg=") (number . 492) (title . "clojure-toplevel-inside-comment-form break inserting open paren in comment block.") (user (login . "DogLooksGood") (id . 11796018) (node_id . "MDQ6VXNlcjExNzk2MDE4") (avatar_url . "https://avatars2.githubusercontent.com/u/11796018?v=4") (gravatar_id . "") (url . "https://api.github.com/users/DogLooksGood") (html_url . "https://github.com/DogLooksGood") (followers_url . "https://api.github.com/users/DogLooksGood/followers") (following_url . "https://api.github.com/users/DogLooksGood/following{/other_user}") (gists_url . "https://api.github.com/users/DogLooksGood/gists{/gist_id}") (starred_url . "https://api.github.com/users/DogLooksGood/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/DogLooksGood/subscriptions") (organizations_url . "https://api.github.com/users/DogLooksGood/orgs") (repos_url . "https://api.github.com/users/DogLooksGood/repos") (events_url . "https://api.github.com/users/DogLooksGood/events{/privacy}") (received_events_url . "https://api.github.com/users/DogLooksGood/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2018-10-04T07:50:53Z") (updated_at . "2018-10-04T07:50:53Z") (closed_at) (author_association . "NONE") (body . "## Steps to reproduce the problem
```clojure
(comment
  |)   ;; <-- insert `(` here
```
## Expected behavior
should insert a pair of parens.

## Actual behavior
insert a single open paren, which break the balance of parens.

## Environment & Version information

### clojure-mode version information
clojure-mode (5.8.2)

### Emacs version
Emacs 27.0.50

### Operating system
Linux
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/482") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/482/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/482/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/482/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/482") (id . 349509677) (node_id . "MDU6SXNzdWUzNDk1MDk2Nzc=") (number . 482) (title . "Non standard keymap assignment?") (user (login . "alain-picard") (id . 3916016) (node_id . "MDQ6VXNlcjM5MTYwMTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/3916016?v=4") (gravatar_id . "") (url . "https://api.github.com/users/alain-picard") (html_url . "https://github.com/alain-picard") (followers_url . "https://api.github.com/users/alain-picard/followers") (following_url . "https://api.github.com/users/alain-picard/following{/other_user}") (gists_url . "https://api.github.com/users/alain-picard/gists{/gist_id}") (starred_url . "https://api.github.com/users/alain-picard/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/alain-picard/subscriptions") (organizations_url . "https://api.github.com/users/alain-picard/orgs") (repos_url . "https://api.github.com/users/alain-picard/repos") (events_url . "https://api.github.com/users/alain-picard/events{/privacy}") (received_events_url . "https://api.github.com/users/alain-picard/received_events") (type . "User") (site_admin)) (labels ((id . 461481611) (node_id . "MDU6TGFiZWw0NjE0ODE2MTE=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/enhancement") (name . "enhancement") (color . "0052cc") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-08-10T13:10:47Z") (updated_at . "2018-08-16T06:28:45Z") (closed_at) (author_association . "NONE") (body . "Dear clojure mode maintainers,

In clojure mode the following currently holds:

    C-c SPC runs the command clojure-align (found in clojure-mode-map),
    which is an interactive compiled Lisp function in ‘clojure-mode.el’.

    It is bound to C-c SPC, <menu-bar> <Clojure> <Align expression>.

I believe this violates the emacs convention of which keys are
reserved for users; at least the elisp manual states the following:

     • The key sequences bound in a major mode keymap should usually start
        with ‘C-c’, followed by a control character, a digit, or ‘{’, ‘}’,
        ‘<’, ‘>’, ‘:’ or ‘;’.  The other punctuation characters are
        reserved for minor modes, and ordinary letters are reserved for
        users.

Now, I'm not entirely sure if the space bar is considered an \"ordinary letter\"
or \"punctuation\", but it seems to me it should be a reserved key.

I discovered this while installing ace-jump mode, which recommends C-c SPC
for its main functionality.

I guess if you agree that this behaviour is undesirable, I would recommend
moving clojure-align (which is a nice, and useful function) to C-c C-SPC.
If you don't agree...  well, I thank you very, very much for clojure-mode anyways! ;-)

(this is all in clojure-mode (version 5.7.0-snapshot))")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/480") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/480/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/480/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/480/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/480") (id . 345418123) (node_id . "MDU6SXNzdWUzNDU0MTgxMjM=") (number . 480) (title . "namespace caching breaks updating namespace name") (user (login . "dpsutton") (id . 6377293) (node_id . "MDQ6VXNlcjYzNzcyOTM=") (avatar_url . "https://avatars2.githubusercontent.com/u/6377293?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dpsutton") (html_url . "https://github.com/dpsutton") (followers_url . "https://api.github.com/users/dpsutton/followers") (following_url . "https://api.github.com/users/dpsutton/following{/other_user}") (gists_url . "https://api.github.com/users/dpsutton/gists{/gist_id}") (starred_url . "https://api.github.com/users/dpsutton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dpsutton/subscriptions") (organizations_url . "https://api.github.com/users/dpsutton/orgs") (repos_url . "https://api.github.com/users/dpsutton/repos") (events_url . "https://api.github.com/users/dpsutton/events{/privacy}") (received_events_url . "https://api.github.com/users/dpsutton/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t)) ((id . 461481611) (node_id . "MDU6TGFiZWw0NjE0ODE2MTE=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/enhancement") (name . "enhancement") (color . "0052cc") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 5) (created_at . "2018-07-28T04:40:03Z") (updated_at . "2018-08-18T12:04:20Z") (closed_at) (author_association . "CONTRIBUTOR") (body . "```lisp   
 (defun clojure-update-ns ()
      \"Update the namespace of the current buffer.
    Useful if a file has been renamed.\"
      (interactive)
      (let ((nsname (funcall clojure-expected-ns-function)))
        (when nsname
          (save-excursion
            (save-match-data
              (if (clojure-find-ns)
                  (progn
                    (replace-match nsname nil nil nil 4)
                    (message \"ns form updated to `%s'\" nsname)
                    (setq clojure-cached-ns nsname))
                (error \"Namespace not found\")))))))
```

This is the helpful function to update the namespace and reset the cache for namespaces. Unfortunately it relies on the replace match generated in `clojure-find-ns`. The problem is that this match does not happen if namespace caching is enbled.

```lisp
    (defun clojure-find-ns ()
      \"Return the namespace of the current Clojure buffer.
    Return the namespace closest to point and above it.  If there are
    no namespaces above point, return the first one in the buffer.

    The results will be cac(match-string-no-properties 4)hed if `clojure-cache-ns' is set to t.\"
      (if (and clojure-cache-ns clojure-cached-ns)
          clojure-cached-ns
        (let ((ns (save-excursion
                    (save-restriction
                      (widen)

                      ;; Move to top-level to avoid searching from inside ns
                      (ignore-errors (while t (up-list nil t t)))

                      ;; The closest ns form above point.
                      (when (or (re-search-backward clojure-namespace-name-regex nil t)
                                ;; Or any form at all.
                                (and (goto-char (point-min))
                                     (re-search-forward clojure-namespace-name-regex nil t)))
                        (match-string-no-properties 4))))))
          (setq clojure-cached-ns ns)
          ns)))
```
Note the top level bails if the cache is already set and therefore does not call `(match-string-no-properties 4)` yielding an error.


This leaves an unfortunate catch-22: if you use the cache, you need to update it with update-ns. If you update the ns with the cache on, it doesn't create the match to update the cache.")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/469") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/469/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/469/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/469/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/469") (id . 294691819) (node_id . "MDU6SXNzdWUyOTQ2OTE4MTk=") (number . 469) (title . "Unexpected indentation of top-level string-valued def") (user (login . "codeasone") (id . 22691943) (node_id . "MDQ6VXNlcjIyNjkxOTQz") (avatar_url . "https://avatars1.githubusercontent.com/u/22691943?v=4") (gravatar_id . "") (url . "https://api.github.com/users/codeasone") (html_url . "https://github.com/codeasone") (followers_url . "https://api.github.com/users/codeasone/followers") (following_url . "https://api.github.com/users/codeasone/following{/other_user}") (gists_url . "https://api.github.com/users/codeasone/gists{/gist_id}") (starred_url . "https://api.github.com/users/codeasone/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/codeasone/subscriptions") (organizations_url . "https://api.github.com/users/codeasone/orgs") (repos_url . "https://api.github.com/users/codeasone/repos") (events_url . "https://api.github.com/users/codeasone/events{/privacy}") (received_events_url . "https://api.github.com/users/codeasone/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-02-06T09:43:21Z") (updated_at . "2018-03-12T01:35:22Z") (closed_at) (author_association . "NONE") (body . "Perhaps related to https://github.com/clojure-emacs/clojure-mode/issues/405 

## Expected behavior

```
(def foo \"<character-entered>abc\")
``` 

## Actual behavior

```
  (def foo \"<character-entered>abc\")
``` 

Form indented as a docstring unnecessarily. 

## Steps to reproduce the problem

With the following `var` definition: 
```
(def foo \"|abc\")
``` 
And cursor at `|` 

Entering any character causes unhelpful indentation:

```
  (def foo \"Mabc\")
``` 

It appears to be because `clojure-mode` determines that the form is a [docstring](https://github.com/clojure-emacs/clojure-mode/blob/5cf0fd9360dc5a9a95464601319062673d213807/clojure-mode.el#L1207)

Unfortunately I don't have the time to debug the treatment of [syntax-ppss](https://www.gnu.org/software/emacs/manual/html_node/elisp/Position-Parse.html), which I suspect is at the root of the issue. 

## Environment & Version information

```
GNU Emacs 26.0.91 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.18.9) of 2018-01-26
clojure-mode (version 5.7.0-snapshot)
Version: 20180202.922
Commit: 5cf0fd9360dc5a9a95464601319062673d213807
```

The issues does not present with current `melpa-stable` release of `clojure-mode`: 

```
Version: 5.6.1
Commit: fdbdfb91e0a5731bf9a739b70c5f217c5d12ae6d
``` ")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/468") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/468/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/468/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/468/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/468") (id . 290204994) (node_id . "MDU6SXNzdWUyOTAyMDQ5OTQ=") (number . 468) (title . "Making ns-qualified keywords not have font-lock-type-face") (user (login . "vemv") (id . 1162994) (node_id . "MDQ6VXNlcjExNjI5OTQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/1162994?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vemv") (html_url . "https://github.com/vemv") (followers_url . "https://api.github.com/users/vemv/followers") (following_url . "https://api.github.com/users/vemv/following{/other_user}") (gists_url . "https://api.github.com/users/vemv/gists{/gist_id}") (starred_url . "https://api.github.com/users/vemv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vemv/subscriptions") (organizations_url . "https://api.github.com/users/vemv/orgs") (repos_url . "https://api.github.com/users/vemv/repos") (events_url . "https://api.github.com/users/vemv/events{/privacy}") (received_events_url . "https://api.github.com/users/vemv/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 6) (created_at . "2018-01-20T16:41:59Z") (updated_at . "2018-03-28T14:55:40Z") (closed_at) (author_association . "CONTRIBUTOR") (body . "Given a ns-qualified keyword such as:

`::kws.grid/column-settings`

I'd like only `clojure-keyword-face` to be applied to it. But also `font-lock-type-face` is partially applied to it:

**How it looks like**

![image](https://user-images.githubusercontent.com/1162994/35185631-13825ba6-fe08-11e7-8a5f-c3472a70b9ab.png)

**How it is parsed**

```
#(\"::kws.grid/column-settings\" 0 6 (fontified t face (clojure-keyword-face)) 6 10 (fontified t face (font-lock-type-face clojure-keyword-face)) 10 11 (fontified t face (default clojure-keyword-face)) 11 25 (fontified t face (clojure-keyword-face)) 25 26 (fontified t font-lock-multiline t face (clojure-keyword-face)))
```

The problematic bit seems to be `(font-lock-type-face clojure-keyword-face)`.

I'm not sure if this is a feature. To me it looks buggy, because only `grid` gets the grey coloring. But in the example `grid` does not have a special meaning.

---

Using clojure-mode latest/pristine, no fork")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/466") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/466/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/466/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/466/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/pull/466") (id . 285290796) (node_id . "MDExOlB1bGxSZXF1ZXN0MTYwNjM4MDY2") (number . 466) (title . "Make three font-lock faces customizable") (user (login . "vemv") (id . 1162994) (node_id . "MDQ6VXNlcjExNjI5OTQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/1162994?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vemv") (html_url . "https://github.com/vemv") (followers_url . "https://api.github.com/users/vemv/followers") (following_url . "https://api.github.com/users/vemv/following{/other_user}") (gists_url . "https://api.github.com/users/vemv/gists{/gist_id}") (starred_url . "https://api.github.com/users/vemv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vemv/subscriptions") (organizations_url . "https://api.github.com/users/vemv/orgs") (repos_url . "https://api.github.com/users/vemv/repos") (events_url . "https://api.github.com/users/vemv/events{/privacy}") (received_events_url . "https://api.github.com/users/vemv/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 10) (created_at . "2018-01-01T06:20:32Z") (updated_at . "2018-10-02T07:19:25Z") (closed_at) (author_association . "CONTRIBUTOR") (pull_request (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls/466") (html_url . "https://github.com/clojure-emacs/clojure-mode/pull/466") (diff_url . "https://github.com/clojure-emacs/clojure-mode/pull/466.diff") (patch_url . "https://github.com/clojure-emacs/clojure-mode/pull/466.patch")) (body . "Introduce `clojure-global-constant-face`, `clojure-def-symbol-face`, `clojure-lambda-arg-face`.

Updated tests, although I couldn't get to run them (never had done so. Tried with `M-x ert`):

```
Selector: t
Passed:  0
Failed:  0
Skipped: 0
Total:   0/0

Started at:   2018-01-01 07:14:57+0100
Finished.
Finished at:  2018-01-01 07:14:57+0100
```")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/464") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/464/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/464/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/464/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/464") (id . 282676105) (node_id . "MDU6SXNzdWUyODI2NzYxMDU=") (number . 464) (title . "Better way to maintain custom indentation") (user (login . "poernahi") (id . 10459441) (node_id . "MDQ6VXNlcjEwNDU5NDQx") (avatar_url . "https://avatars0.githubusercontent.com/u/10459441?v=4") (gravatar_id . "") (url . "https://api.github.com/users/poernahi") (html_url . "https://github.com/poernahi") (followers_url . "https://api.github.com/users/poernahi/followers") (following_url . "https://api.github.com/users/poernahi/following{/other_user}") (gists_url . "https://api.github.com/users/poernahi/gists{/gist_id}") (starred_url . "https://api.github.com/users/poernahi/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/poernahi/subscriptions") (organizations_url . "https://api.github.com/users/poernahi/orgs") (repos_url . "https://api.github.com/users/poernahi/repos") (events_url . "https://api.github.com/users/poernahi/events{/privacy}") (received_events_url . "https://api.github.com/users/poernahi/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2017-12-17T07:33:44Z") (updated_at . "2018-07-31T16:47:23Z") (closed_at) (author_association . "NONE") (body . "## Problem

Sometimes, it is desirable to indent specific forms in a non-standard(?) way. Below is a couple of use-case exhibit to better illustrate the issue.
```clojure
;;;; om

;; default
(dom/div #js{:className \"container\"}
         (dom/ul #js{:className \"list\"}
                 (dom/li #js{:className \"item\"} \"Hello\")))

;; better
(dom/div #js{:className \"container\"}
  (dom/ul #js{:className \"list\"}
    (dom/li #js{:className \"item\"} \"Hello\")))

;; this is ok too?
(dom/div #js{:className \"container\"}
 (dom/ul #js{:className \"list\"}
  (dom/li #js{:className \"item\"} \"Hello\")))


;;;; re-frame

;; default
(reg-cofx :now      
          (fn [cofx _]
            (assoc cofx :now (js/Date.))))

;; better
(reg-cofx :now      
  (fn [cofx _]
    (assoc cofx :now (js/Date.))))


;;;; Fulcro

;; default
(defmutation something
  \"docstring\"
  [args]
  (action [{:keys [state]}]
          (do-something-to state))
  (remote [env]
          (some-logic env)))

;; better
(defmutation something
  \"docstring\"
  [args]
  (action [{:keys [state]}]
    (do-something-to state))
  (remote [env]
    (some-logic env)))
```

## Current Solutions

Currently, the most practical solution is to maintain individual/per-project list of symbol-indentation lookup table. A relatively small example is shown below, but imagine that for `om`, one would need to list every single dom element in the file. 
https://github.com/metabase/metabase/blob/master/.dir-locals.el

## Other Solutions

This issue has been reported a couple times in the past and some suggestions have been voiced and/or implemented, but I feel that we have not really solved this problem.

https://github.com/clojure-emacs/clojure-mode/issues/398
The idea here is to infer indentation based on arg list. The concern was that it is unreliable.

https://github.com/clojure-emacs/clojure-mode/issues/309
Metadata based indentation is technically a good solution. This requires buy-in from library maintainer and at least in one case was shot down as seen here https://github.com/omcljs/om/issues/728 . These are Cognitect staff, so I feel it will be very unlikely we will be getting any metadata support in core libraries. I speculate that quite a number of library authors and Cognitect staffs are using Cursive and simply don't have this problem.

## Proposed Solutions

Maybe we can brainstorm for a better way to handle this?
- Maybe an option that allow user to override indentation and trigger auto-indent of current form with a keystroke?
- Shorten the symbol lookup table by allowing regex pattern matching?
- Infer indentation based on other uses in the project/file? User will only have to fix indentation once and emacs will try to conform to the file's current indentation rule. Not sure what to do if there is only one use in a project/file.
- I'm sure clojure-mode users will have other ideas?

Thank you for contributing!")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/445") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/445/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/445/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/445/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/445") (id . 259056945) (node_id . "MDU6SXNzdWUyNTkwNTY5NDU=") (number . 445) (title . "(def s \"a string\") font locks \"a string\" as a docstring") (user (login . "oskarkv") (id . 861064) (node_id . "MDQ6VXNlcjg2MTA2NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/861064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/oskarkv") (html_url . "https://github.com/oskarkv") (followers_url . "https://api.github.com/users/oskarkv/followers") (following_url . "https://api.github.com/users/oskarkv/following{/other_user}") (gists_url . "https://api.github.com/users/oskarkv/gists{/gist_id}") (starred_url . "https://api.github.com/users/oskarkv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/oskarkv/subscriptions") (organizations_url . "https://api.github.com/users/oskarkv/orgs") (repos_url . "https://api.github.com/users/oskarkv/repos") (events_url . "https://api.github.com/users/oskarkv/events{/privacy}") (received_events_url . "https://api.github.com/users/oskarkv/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 9) (created_at . "2017-09-20T06:47:20Z") (updated_at . "2018-09-25T03:26:18Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

Font lock the string `\"a string\"` as a string in `(def s \"a string\")`.

## Actual behavior

The string `\"a string\"` is font locked as a docstring in `(def s \"a string\")`.

## clojure-mode version information
```
clojure-mode (version 5.7.0-snapshot)
```

## Proposed solution

I played around with this, and it can be solved by adding a check in this `and` https://github.com/clojure-emacs/clojure-mode/blob/master/clojure-mode.el#L898 in the function `clojure-font-lock-syntactic-face-function`. For example
```
(and ...
  (or (save-excursion
        (goto-char startpos)
        (not (= ?\\) (char-after (+ startpos (length (sexp-at-point)) 2)))))
      (string= \"defprotocol\" firstsym)))
```

This, of course, checks for a closing paren after the string, and if so, it is not considered a docstring, except for `defprotocol`, which is the only kind of form that can have a docstring in the last position. Instead of checking for a paren, one could of course check for another element, but it is more involved.

Opinions, suggestions, etc?

")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/439") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/439/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/439/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/439/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/439") (id . 244843101) (node_id . "MDU6SXNzdWUyNDQ4NDMxMDE=") (number . 439) (title . "[Feature Request] Support for shebang line and clojure scripting") (user (login . "phillord") (id . 91386) (node_id . "MDQ6VXNlcjkxMzg2") (avatar_url . "https://avatars3.githubusercontent.com/u/91386?v=4") (gravatar_id . "") (url . "https://api.github.com/users/phillord") (html_url . "https://github.com/phillord") (followers_url . "https://api.github.com/users/phillord/followers") (following_url . "https://api.github.com/users/phillord/following{/other_user}") (gists_url . "https://api.github.com/users/phillord/gists{/gist_id}") (starred_url . "https://api.github.com/users/phillord/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/phillord/subscriptions") (organizations_url . "https://api.github.com/users/phillord/orgs") (repos_url . "https://api.github.com/users/phillord/repos") (events_url . "https://api.github.com/users/phillord/events{/privacy}") (received_events_url . "https://api.github.com/users/phillord/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2017-07-22T11:59:52Z") (updated_at . "2018-09-25T03:26:08Z") (closed_at) (author_association . "CONTRIBUTOR") (body . "It would be nice to have better support for writing clojure scripts.

For example, boot provides shebag support so a script might look like this:

     #!/usr/bin/env boot
     (println \"hello world\")

But the shebang line confuses syntax highlighting. It would be nice if clojure mode understood first line shebang lines!

First reported on https://github.com/clojure-emacs/cider/issues/2060")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/435") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/435/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/435/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/435/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/435") (id . 234360650) (node_id . "MDU6SXNzdWUyMzQzNjA2NTA=") (number . 435) (title . "Symbols with ' in them are not font-locked correctly") (user (login . "oskarkv") (id . 861064) (node_id . "MDQ6VXNlcjg2MTA2NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/861064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/oskarkv") (html_url . "https://github.com/oskarkv") (followers_url . "https://api.github.com/users/oskarkv/followers") (following_url . "https://api.github.com/users/oskarkv/following{/other_user}") (gists_url . "https://api.github.com/users/oskarkv/gists{/gist_id}") (starred_url . "https://api.github.com/users/oskarkv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/oskarkv/subscriptions") (organizations_url . "https://api.github.com/users/oskarkv/orgs") (repos_url . "https://api.github.com/users/oskarkv/repos") (events_url . "https://api.github.com/users/oskarkv/events{/privacy}") (received_events_url . "https://api.github.com/users/oskarkv/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 6) (created_at . "2017-06-07T22:25:39Z") (updated_at . "2017-10-31T08:18:33Z") (closed_at) (author_association . "NONE") (body . "A symbol with ' in it should be font-locked so that the whole symbol has the same color. I'm no expert on font-locking, nor on clojure-mode, but I quickly browsed the code, and this seems wrong:
``` (defconst clojure--sym-forbidden-rest-chars \"][\\\";\\'@\\\\^`~\\(\\)\\{\\}\\\\,\\s\\t\\n\\r\"```
since https://clojure.org/reference/reader says that `'` is allowed in a symbol. I tried to change that but it didn't solve the problem below.

## Steps to reproduce the problem

Type `(defn test'fn [])` in clojure-mode and note the colors.

## Expected behavior

All characters of `test'fn` should be of the same color.

## Actual behavior

The characters after and including `'` are not of the expected color (they are white, my default text color).

## clojure-mode version information

5.7.0-snapshot
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/433") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/433/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/433/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/433/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/433") (id . 230441009) (node_id . "MDU6SXNzdWUyMzA0NDEwMDk=") (number . 433) (title . "`as->` indentation spec should not be 2") (user (login . "oskarkv") (id . 861064) (node_id . "MDQ6VXNlcjg2MTA2NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/861064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/oskarkv") (html_url . "https://github.com/oskarkv") (followers_url . "https://api.github.com/users/oskarkv/followers") (following_url . "https://api.github.com/users/oskarkv/following{/other_user}") (gists_url . "https://api.github.com/users/oskarkv/gists{/gist_id}") (starred_url . "https://api.github.com/users/oskarkv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/oskarkv/subscriptions") (organizations_url . "https://api.github.com/users/oskarkv/orgs") (repos_url . "https://api.github.com/users/oskarkv/repos") (events_url . "https://api.github.com/users/oskarkv/events{/privacy}") (received_events_url . "https://api.github.com/users/oskarkv/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2017-05-22T15:54:03Z") (updated_at . "2017-10-12T01:01:52Z") (closed_at) (author_association . "NONE") (body . "`as->` indentation spec should not be 2 It creates the following indentation, which is not desirable, in my eyes. Note how the two lines under it are indented differently.

```
(-> 123
  (+ 1)
  (as-> x
      (+ x 1)
    (- 1 x)))
```

I'm not exactly sure what indentation spec to use though. The problem, of course, is that if you want to use `as->` without a surrounding threading macro, and you don't have the two first argument on the first line, the second should be indented differently than the rest. However, I think the situation above is more common than that.")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/425") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/425/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/425/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/425/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/425") (id . 209883403) (node_id . "MDU6SXNzdWUyMDk4ODM0MDM=") (number . 425) (title . "#_ comments are not marked as comments (e.g. via `syntax-table` text property)") (user (login . "dottedmag") (id . 16120) (node_id . "MDQ6VXNlcjE2MTIw") (avatar_url . "https://avatars1.githubusercontent.com/u/16120?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dottedmag") (html_url . "https://github.com/dottedmag") (followers_url . "https://api.github.com/users/dottedmag/followers") (following_url . "https://api.github.com/users/dottedmag/following{/other_user}") (gists_url . "https://api.github.com/users/dottedmag/gists{/gist_id}") (starred_url . "https://api.github.com/users/dottedmag/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dottedmag/subscriptions") (organizations_url . "https://api.github.com/users/dottedmag/orgs") (repos_url . "https://api.github.com/users/dottedmag/repos") (events_url . "https://api.github.com/users/dottedmag/events{/privacy}") (received_events_url . "https://api.github.com/users/dottedmag/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2017-02-23T21:03:21Z") (updated_at . "2017-06-19T14:42:52Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

`#_` comments should mark the following expr as a comment (e.g. via `syntax-table` text property).

## Actual behavior

It does not happen.

## Steps to reproduce the problem

Enable rainbow-delimiters. See that the rainbow delimiters are not disabled
in the form following `#_`:

<img width=\"375\" alt=\"8ae998ca-f94b-11e6-8dad-373385272955\" src=\"https://cloud.githubusercontent.com/assets/16120/23278924/77ed32f4-fa13-11e6-934d-150e97093d3b.png\">

See the corresponding (invalid) issue in `rainbow-delimiters`: https://github.com/Fanael/rainbow-delimiters/issues/29

## Environment & Version information

### clojure-mode version information

```
clojure-mode (version 5.7.0-snapshot)
```

### Emacs version

```
GNU Emacs 25.1.90.1 (x86_64-apple-darwin15.6.0, NS appkit-1404.47 Version 10.11.6 (Build 15G1217))
 of 2017-02-06
```

### Operating system

OS X 10.11
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/422") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/422/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/422/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/422/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/422") (id . 202295853) (node_id . "MDU6SXNzdWUyMDIyOTU4NTM=") (number . 422) (title . "Migrate the tests to buttercup") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (labels ((id . 461481611) (node_id . "MDU6TGFiZWw0NjE0ODE2MTE=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/enhancement") (name . "enhancement") (color . "0052cc") (default . t)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2017-01-21T06:09:33Z") (updated_at . "2018-09-25T03:16:28Z") (closed_at) (author_association . "MEMBER") (body . "`ert` is horrible and we're already using https://github.com/jorgenschaefer/emacs-buttercup for CIDER's test suite. Ideally we should use buttercup here as well. 

The transition should be relatively simple, but it will obviously require some manual work.

@cskksc you tackled this for CIDER, let me know if you'd be willing to help with `clojure-mode` as well. 

")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420") (id . 195882485) (node_id . "MDU6SXNzdWUxOTU4ODI0ODU=") (number . 420) (title . "How to define-clojure-indent on all keywords at once?") (user (login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2016-12-15T18:41:33Z") (updated_at . "2018-09-25T03:24:52Z") (closed_at) (author_association . "NONE") (body . "It looks like `define-clojure-indent` (and `put-clojure-indent`) only allow defining the indentation rules for individual symbols. I wish for *all* keywords to be indented like this:

```
(:keyword
  map)
```

Unfortunately, there seems to be no way to do that except by listing every possible keyword explicitly:

```
(define-clojure-indent
  (:import 0)
  (:require 0)
  ... lots more ...
  (:use 0))
```

The problems with that approach are obvious, I think.

Since this isn't a bug report, I don't think environment information will be helpful (although I install the latest versions of my Emacs packages from MELPA). I am happy to report such information if need be, though.")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/419") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/419/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/419/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/419/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/419") (id . 195389857) (node_id . "MDU6SXNzdWUxOTUzODk4NTc=") (number . 419) (title . "cond-> indenting incompatible with common nested -> use case") (user (login . "aengelberg") (id . 4122172) (node_id . "MDQ6VXNlcjQxMjIxNzI=") (avatar_url . "https://avatars0.githubusercontent.com/u/4122172?v=4") (gravatar_id . "") (url . "https://api.github.com/users/aengelberg") (html_url . "https://github.com/aengelberg") (followers_url . "https://api.github.com/users/aengelberg/followers") (following_url . "https://api.github.com/users/aengelberg/following{/other_user}") (gists_url . "https://api.github.com/users/aengelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/aengelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/aengelberg/subscriptions") (organizations_url . "https://api.github.com/users/aengelberg/orgs") (repos_url . "https://api.github.com/users/aengelberg/repos") (events_url . "https://api.github.com/users/aengelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/aengelberg/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2016-12-13T22:40:43Z") (updated_at . "2016-12-13T22:40:43Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior
```clojure
(-> obj
    (cond->
      pred1
      (do-a-thing)
      pred2
      (do-another-thing)))
```
## Actual behavior
```clojure
(-> obj
    (cond->
        pred1
      (do-a-thing)
      pred2
      (do-another-thing)))
```

## Environment & Version information

### clojure-mode version information
```
clojure-mode (version 5.5.2)
```
### Emacs version
24.5.1
### Operating system
Mac OS X El Capitan 10.11.3
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/414") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/414/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/414/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/414/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/414") (id . 183850919) (node_id . "MDU6SXNzdWUxODM4NTA5MTk=") (number . 414) (title . "Indenting algorithm is confused by Windows CRLF line endings") (user (login . "Engelberg") (id . 138571) (node_id . "MDQ6VXNlcjEzODU3MQ==") (avatar_url . "https://avatars2.githubusercontent.com/u/138571?v=4") (gravatar_id . "") (url . "https://api.github.com/users/Engelberg") (html_url . "https://github.com/Engelberg") (followers_url . "https://api.github.com/users/Engelberg/followers") (following_url . "https://api.github.com/users/Engelberg/following{/other_user}") (gists_url . "https://api.github.com/users/Engelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/Engelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/Engelberg/subscriptions") (organizations_url . "https://api.github.com/users/Engelberg/orgs") (repos_url . "https://api.github.com/users/Engelberg/repos") (events_url . "https://api.github.com/users/Engelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/Engelberg/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t)) ((id . 10701377) (node_id . "MDU6TGFiZWwxMDcwMTM3Nw==") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/indentation") (name . "indentation") (color . "fbca04") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2016-10-19T02:31:00Z") (updated_at . "2016-12-06T09:02:35Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

```
(let [x y]
  expr)
```
## Actual behavior

```
(let [x y]
      expr)
```
## Steps to reproduce the problem

CRLF line ending at the end of the let line.
## Environment & Version information
### clojure-mode version information

```
  20161004.2314
```

Version 5.5.2
### Emacs version

Emacs 25.1.1
### Operating system

Windows 10
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/411") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/411/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/411/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/411/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/411") (id . 183275354) (node_id . "MDU6SXNzdWUxODMyNzUzNTQ=") (number . 411) (title . "Add #_ reader form") (user (login . "benedekfazekas") (id . 1003422) (node_id . "MDQ6VXNlcjEwMDM0MjI=") (avatar_url . "https://avatars0.githubusercontent.com/u/1003422?v=4") (gravatar_id . "") (url . "https://api.github.com/users/benedekfazekas") (html_url . "https://github.com/benedekfazekas") (followers_url . "https://api.github.com/users/benedekfazekas/followers") (following_url . "https://api.github.com/users/benedekfazekas/following{/other_user}") (gists_url . "https://api.github.com/users/benedekfazekas/gists{/gist_id}") (starred_url . "https://api.github.com/users/benedekfazekas/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/benedekfazekas/subscriptions") (organizations_url . "https://api.github.com/users/benedekfazekas/orgs") (repos_url . "https://api.github.com/users/benedekfazekas/repos") (events_url . "https://api.github.com/users/benedekfazekas/events{/privacy}") (received_events_url . "https://api.github.com/users/benedekfazekas/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2016-10-16T16:16:48Z") (updated_at . "2017-06-19T18:16:01Z") (closed_at) (author_association . "MEMBER") (body . "Migrated over from clojure-emacs/clj-refactor.el#334 originally created by @agzam
Agreement was that this should rather come here. see more discussion on the original issue.

the original description is as follows:
Clojure's `#_` (Ignore next form reader macro) is very useful. Would be very cool to have a function and a dedicated key binding to toggle it.

My initial attempt looks like this:

```
(defun cljr-toggle-ignore-next-form ()
  \"Ignore next form (#_)\"
  (interactive)
  (if (search-backward \"#_\" 2 t 1)
  (delete-char 2)
(progn
  (let ((fc (following-char)))
    (cond ((-contains? '( ?\\) ?\\] ?\\} ) fc) (paredit-backward-up))
      ((-contains? '( ?\\( ?\\[ ?\\: ?\\{ ) fc) nil)
      (t (beginning-of-thing 'sexp)))
    (insert \"#_\")))))
```
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/410") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/410/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/410/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/410/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/410") (id . 183004822) (node_id . "MDU6SXNzdWUxODMwMDQ4MjI=") (number . 410) (title . "Add an arity to a function") (user (login . "benedekfazekas") (id . 1003422) (node_id . "MDQ6VXNlcjEwMDM0MjI=") (avatar_url . "https://avatars0.githubusercontent.com/u/1003422?v=4") (gravatar_id . "") (url . "https://api.github.com/users/benedekfazekas") (html_url . "https://github.com/benedekfazekas") (followers_url . "https://api.github.com/users/benedekfazekas/followers") (following_url . "https://api.github.com/users/benedekfazekas/following{/other_user}") (gists_url . "https://api.github.com/users/benedekfazekas/gists{/gist_id}") (starred_url . "https://api.github.com/users/benedekfazekas/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/benedekfazekas/subscriptions") (organizations_url . "https://api.github.com/users/benedekfazekas/orgs") (repos_url . "https://api.github.com/users/benedekfazekas/repos") (events_url . "https://api.github.com/users/benedekfazekas/events{/privacy}") (received_events_url . "https://api.github.com/users/benedekfazekas/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 461481412) (node_id . "MDU6TGFiZWw0NjE0ODE0MTI=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/refactoring") (name . "refactoring") (color . "c2e0c6") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2016-10-14T09:33:19Z") (updated_at . "2016-10-14T10:09:20Z") (closed_at) (author_association . "MEMBER") (body . "By default I define functions as

```
(defn func [arg]
  body)
```

Adding an arity to such a function requires
1. Wrapping the existing arglist and body in parens,
2. Inserting a set of parens, and
3. Defining a new arglist.

This is the most tedious refactoring I regularly do, and seems like a good candidate for a clj-refactor operation. I don't have any suggestions for how such an operation ought to work; any automated system ought to beat doing it manually.

Originally crated by @exupero on clj-refactor.el: clojure-emacs/clj-refactor.el#349
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/406") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/406/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/406/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/406/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/406") (id . 173551496) (node_id . "MDU6SXNzdWUxNzM1NTE0OTY=") (number . 406) (title . "Feature request: as-> highlighting") (user (login . "tanzoniteblack") (id . 1134611) (node_id . "MDQ6VXNlcjExMzQ2MTE=") (avatar_url . "https://avatars1.githubusercontent.com/u/1134611?v=4") (gravatar_id . "") (url . "https://api.github.com/users/tanzoniteblack") (html_url . "https://github.com/tanzoniteblack") (followers_url . "https://api.github.com/users/tanzoniteblack/followers") (following_url . "https://api.github.com/users/tanzoniteblack/following{/other_user}") (gists_url . "https://api.github.com/users/tanzoniteblack/gists{/gist_id}") (starred_url . "https://api.github.com/users/tanzoniteblack/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/tanzoniteblack/subscriptions") (organizations_url . "https://api.github.com/users/tanzoniteblack/orgs") (repos_url . "https://api.github.com/users/tanzoniteblack/repos") (events_url . "https://api.github.com/users/tanzoniteblack/events{/privacy}") (received_events_url . "https://api.github.com/users/tanzoniteblack/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2016-08-26T21:56:59Z") (updated_at . "2016-10-03T06:07:27Z") (closed_at) (author_association . "CONTRIBUTOR") (body . "I was recently having to write a rather complex set of threading code with `as->` and it occurred to me that it would be useful if in an `as->` sexp, we set the font-face of the name of the bound value to a different font face than normal so that it stood out a bit.

Example:

Instead of 

``` clojure
(as-> {:cat 5} x
  (reduce some-fn
          x
          (mapcat someother-fn some-val))
  (assoc x :dog 27)
  (map weird-fn x)
  (map x some-coll))
```

font-locked `x` with some special font-face so we can make it stand out to make it easier to quickly parse out this information.

I would consider this to be very low priority, but might be a nice to have.
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/405") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/405/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/405/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/405/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/405") (id . 173454589) (node_id . "MDU6SXNzdWUxNzM0NTQ1ODk=") (number . 405) (title . "Indentation bug involving strings ") (user (login . "sooheon") (id . 302945) (node_id . "MDQ6VXNlcjMwMjk0NQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/302945?v=4") (gravatar_id . "") (url . "https://api.github.com/users/sooheon") (html_url . "https://github.com/sooheon") (followers_url . "https://api.github.com/users/sooheon/followers") (following_url . "https://api.github.com/users/sooheon/following{/other_user}") (gists_url . "https://api.github.com/users/sooheon/gists{/gist_id}") (starred_url . "https://api.github.com/users/sooheon/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/sooheon/subscriptions") (organizations_url . "https://api.github.com/users/sooheon/orgs") (repos_url . "https://api.github.com/users/sooheon/repos") (events_url . "https://api.github.com/users/sooheon/events{/privacy}") (received_events_url . "https://api.github.com/users/sooheon/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2016-08-26T13:36:02Z") (updated_at . "2018-02-06T09:38:19Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

Given the following with cursor at `|`:

```
(def foo |\"abc\")
```

`indent-for-tab-command` should make no change. The sexp is already correctly indented.
## Actual behavior

```
  (def foo |\"abc\")
```

Sexp is indented two spaces.
## Steps to reproduce the problem

The above case. When the string is on the next line, it is not reproduced.
## Environment & Version information
### clojure-mode version information

```
clojure-mode (version 5.5.2)
```
### Emacs version

Emacs 25.1.1
### Operating system

OS X El Cap
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/404") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/404/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/404/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/404/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/404") (id . 172339957) (node_id . "MDU6SXNzdWUxNzIzMzk5NTc=") (number . 404) (title . "Syntax highlighting for #_ forms comments out next form") (user (login . "danielcompton") (id . 811954) (node_id . "MDQ6VXNlcjgxMTk1NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/811954?v=4") (gravatar_id . "") (url . "https://api.github.com/users/danielcompton") (html_url . "https://github.com/danielcompton") (followers_url . "https://api.github.com/users/danielcompton/followers") (following_url . "https://api.github.com/users/danielcompton/following{/other_user}") (gists_url . "https://api.github.com/users/danielcompton/gists{/gist_id}") (starred_url . "https://api.github.com/users/danielcompton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/danielcompton/subscriptions") (organizations_url . "https://api.github.com/users/danielcompton/orgs") (repos_url . "https://api.github.com/users/danielcompton/repos") (events_url . "https://api.github.com/users/danielcompton/events{/privacy}") (received_events_url . "https://api.github.com/users/danielcompton/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2016-08-21T20:34:25Z") (updated_at . "2016-10-03T06:07:46Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

When using the `#_` reader macro, you can chain several together. This lets you comment out more than one form at a time. However the Cider syntax highlighting uses the first `#_` to comment out the second one. For example:

In Cursive:

<img width=\"172\" alt=\"screenshot of intellij idea 12-08-16 8-08-51 am\" src=\"https://cloud.githubusercontent.com/assets/811954/17603155/036b2d9e-6064-11e6-8ba7-2adff68ee7bc.png\">
## Actual behavior

In emacs:

<img width=\"220\" alt=\"screenshot of emacs 12-08-16 8-05-56 am\" src=\"https://cloud.githubusercontent.com/assets/811954/17603138/ece6f40e-6063-11e6-84d3-7fd03e3e6058.png\">
## Steps to reproduce the problem

``` clj
#_ #_ :a :b
```
## Environment & Version information
### clojure-mode version information

```
clojure-mode (version 5.5.2)
```
### Emacs version

`25.1.50.1`
### Operating system

OS X 10.11.6

Carried over from https://github.com/clojure-emacs/cider/issues/1822
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/402") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/402/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/402/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/402/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/402") (id . 169803714) (node_id . "MDU6SXNzdWUxNjk4MDM3MTQ=") (number . 402) (title . "Protocol method docstrings are not font-locked as docstrings") (user (login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2016-08-07T16:17:35Z") (updated_at . "2016-12-31T08:20:48Z") (closed_at) (author_association . "NONE") (body . "## Expected behavior

All docstrings should be shown in the docstring font-lock color (in my color scheme, a darker green than the green used for regular strings).
## Actual behavior

This does not work for the docstrings of protocol methods. The docstring for an _entire_ protocol is colored correctly, but the docstrings for the individual protocol methods are not.
## Steps to reproduce the problem

You can see the behavior in the following image:

<img width=\"163\" alt=\"20160807101248\" src=\"https://cloud.githubusercontent.com/assets/6559064/17463651/bfb5d8f4-5c87-11e6-96ce-678876e75f9f.png\">

Simply pasting the code into a `clj` file should produce the same result.

```
(defprotocol Foo
  \"Here is a
  multiline
  docstring.\"
  (bar [this baz]
    \"Here is a
  multiline
  docstring.\"))
```
## Environment & Version information
### clojure-mode version information

```
clojure-mode (version 5.5.2)
```
### Emacs version

```
GNU Emacs 24.5.1 (x86_64-apple-darwin13.4.0, NS apple-appkit-1265.21)
 of 2015-04-10 on builder10-9.porkrind.org
```
### Operating system

OS X El Capitan 10.11.6
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/377") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/377/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/377/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/377/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/377") (id . 150349329) (node_id . "MDU6SXNzdWUxNTAzNDkzMjk=") (number . 377) (title . "Def highlighting is out of control") (user (login . "expez") (id . 1006557) (node_id . "MDQ6VXNlcjEwMDY1NTc=") (avatar_url . "https://avatars0.githubusercontent.com/u/1006557?v=4") (gravatar_id . "") (url . "https://api.github.com/users/expez") (html_url . "https://github.com/expez") (followers_url . "https://api.github.com/users/expez/followers") (following_url . "https://api.github.com/users/expez/following{/other_user}") (gists_url . "https://api.github.com/users/expez/gists{/gist_id}") (starred_url . "https://api.github.com/users/expez/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/expez/subscriptions") (organizations_url . "https://api.github.com/users/expez/orgs") (repos_url . "https://api.github.com/users/expez/repos") (events_url . "https://api.github.com/users/expez/events{/privacy}") (received_events_url . "https://api.github.com/users/expez/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t)) ((id . 1068248483) (node_id . "MDU6TGFiZWwxMDY4MjQ4NDgz") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/good%20first%20issue") (name . "good first issue") (color . "ffccd2") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 13) (created_at . "2016-04-22T11:57:42Z") (updated_at . "2018-10-05T04:43:30Z") (closed_at) (author_association . "MEMBER") (body . "## Expected behavior

Proper syntax highlighting
## Actual behavior

![image](https://cloud.githubusercontent.com/assets/1006557/14740728/7e3cd566-0891-11e6-81e3-9f1c6acf637a.png)
## Steps to reproduce the problem

Write a form containing a word starting with `def` anywhere, e.g. `(defface 'angry-face)`

I get that the intent was to highlight `defresource` etc the same way as `defn` but this really isn't working as intended.  All calls to functions like `(default-user-settings)` are highlighted like a def now, no matter where in the source they appear.
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/365") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/365/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/365/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/365/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/365") (id . 130024250) (node_id . "MDU6SXNzdWUxMzAwMjQyNTA=") (number . 365) (title . "Font-lock function names in letfn") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (labels ((id . 10701384) (node_id . "MDU6TGFiZWwxMDcwMTM4NA==") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/font-lock") (name . "font-lock") (color . "02d7e1") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2016-01-30T18:56:59Z") (updated_at . "2016-01-30T18:56:59Z") (closed_at) (author_association . "MEMBER") (body . "It'd be nice if function names in `letfn` were font-locked as function names. Here's a simple code snippet:

``` clojure
(letfn [(twice [x]
           (* x 2))
        (six-times [y]
           (* (twice y) 3))]
  (println \"Twice 15 =\" (twice 15))
  (println \"Six times 15 =\" (six-times 15)))
```
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/298") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/298/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/298/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/298/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/298") (id . 86899266) (node_id . "MDU6SXNzdWU4Njg5OTI2Ng==") (number . 298) (title . "mark-sexp in a string should mark the entire string") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 10) (created_at . "2015-06-10T09:13:36Z") (updated_at . "2015-07-04T16:42:57Z") (closed_at) (author_association . "MEMBER") (body . "The title says it all.
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/290") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/290/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/290/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/290/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/290") (id . 71945922) (node_id . "MDU6SXNzdWU3MTk0NTkyMg==") (number . 290) (title . "' (apostrophe) within/at end of symbol not counted as part of symbol") (user (login . "tanzoniteblack") (id . 1134611) (node_id . "MDQ6VXNlcjExMzQ2MTE=") (avatar_url . "https://avatars1.githubusercontent.com/u/1134611?v=4") (gravatar_id . "") (url . "https://api.github.com/users/tanzoniteblack") (html_url . "https://github.com/tanzoniteblack") (followers_url . "https://api.github.com/users/tanzoniteblack/followers") (following_url . "https://api.github.com/users/tanzoniteblack/following{/other_user}") (gists_url . "https://api.github.com/users/tanzoniteblack/gists{/gist_id}") (starred_url . "https://api.github.com/users/tanzoniteblack/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/tanzoniteblack/subscriptions") (organizations_url . "https://api.github.com/users/tanzoniteblack/orgs") (repos_url . "https://api.github.com/users/tanzoniteblack/repos") (events_url . "https://api.github.com/users/tanzoniteblack/events{/privacy}") (received_events_url . "https://api.github.com/users/tanzoniteblack/received_events") (type . "User") (site_admin)) (labels ((id . 124173333) (node_id . "MDU6TGFiZWwxMjQxNzMzMzM=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/bug") (name . "bug") (color . "e11d21") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 16) (created_at . "2015-04-29T18:07:13Z") (updated_at . "2016-01-16T09:17:42Z") (closed_at) (author_association . "CONTRIBUTOR") (body . "Currently clojure-mode appears to be treating `dec'` as the symbol `dec` with a `'` following it. 

This is made most obvious when I call `cider-find-var` on `dec'` at it finds the symbol at point to be `dec` and takes me to that function definition instead of `dec'`.

Care should be taken in resolving this bug that the prefixed `'` (such as in `'clojure.core/dec`) isn't treated as part of the symbol.
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/280") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/280/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/280/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/280/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/280") (id . 60643495) (node_id . "MDU6SXNzdWU2MDY0MzQ5NQ==") (number . 280) (title . "Only namespaces containing prefixes are fontlocked in the ns form") (user (login . "expez") (id . 1006557) (node_id . "MDQ6VXNlcjEwMDY1NTc=") (avatar_url . "https://avatars0.githubusercontent.com/u/1006557?v=4") (gravatar_id . "") (url . "https://api.github.com/users/expez") (html_url . "https://github.com/expez") (followers_url . "https://api.github.com/users/expez/followers") (following_url . "https://api.github.com/users/expez/following{/other_user}") (gists_url . "https://api.github.com/users/expez/gists{/gist_id}") (starred_url . "https://api.github.com/users/expez/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/expez/subscriptions") (organizations_url . "https://api.github.com/users/expez/orgs") (repos_url . "https://api.github.com/users/expez/repos") (events_url . "https://api.github.com/users/expez/events{/privacy}") (received_events_url . "https://api.github.com/users/expez/received_events") (type . "User") (site_admin)) (labels ((id . 461481611) (node_id . "MDU6TGFiZWw0NjE0ODE2MTE=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/enhancement") (name . "enhancement") (color . "0052cc") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 8) (created_at . "2015-03-11T11:17:40Z") (updated_at . "2018-09-25T03:17:44Z") (closed_at) (author_association . "MEMBER") (body . "![Imgur](http://i.imgur.com/F6itCwQ.png)

This happens most often in prefix vectors but applies everywhere
")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/270") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/270/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/270/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/270/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/270") (id . 53991318) (node_id . "MDU6SXNzdWU1Mzk5MTMxOA==") (number . 270) (title . "Decouple from lisp-mode") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (labels ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2015-01-11T13:08:51Z") (updated_at . "2015-07-05T17:25:23Z") (closed_at) (author_association . "MEMBER") (body . "Clojure is reasonably different from both Emacs Lisp and Common Lisp and we should decouple clojure-mode completely from `lisp-mode.el`. The fact that a lot of code is being leveraged from there makes implementing certain things pretty hard.
"))) (nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((id . 85632) (node_id . "MDEwOlJlcG9zaXRvcnk4NTYzMg==") (name . "clojure-mode") (full_name . "clojure-emacs/clojure-mode") (private) (owner (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/clojure-emacs/clojure-mode") (description . "Emacs support for the Clojure(Script) programming language") (fork) (url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (forks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/forks") (keys_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/teams") (hooks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/hooks") (issue_events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/events{/number}") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/events") (assignees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/assignees{/user}") (branches_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/branches{/branch}") (tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/tags") (blobs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/statuses/{sha}") (languages_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/languages") (stargazers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/stargazers") (contributors_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contributors") (subscribers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscribers") (subscription_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscription") (commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contents/{+path}") (compare_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/merges") (archive_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/downloads") (issues_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues{/number}") (pulls_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls{/number}") (milestones_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/milestones{/number}") (notifications_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels{/name}") (releases_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/releases{/id}") (deployments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/deployments") (created_at . "2008-12-05T17:45:07Z") (updated_at . "2018-10-14T22:28:13Z") (pushed_at . "2018-10-12T13:26:20Z") (git_url . "git://github.com/clojure-emacs/clojure-mode.git") (ssh_url . "git@github.com:clojure-emacs/clojure-mode.git") (clone_url . "https://github.com/clojure-emacs/clojure-mode.git") (svn_url . "https://github.com/clojure-emacs/clojure-mode") (homepage . "") (size . 1435) (stargazers_count . 664) (watchers_count . 664) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 196) (mirror_url) (archived) (open_issues_count . 30) (license) (forks . 196) (open_issues . 30) (watchers . 664) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (network_count . 196) (subscribers_count . 56))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 85632) (node_id . "MDEwOlJlcG9zaXRvcnk4NTYzMg==") (name . "clojure-mode") (full_name . "clojure-emacs/clojure-mode") (private) (owner (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/clojure-emacs/clojure-mode") (description . "Emacs support for the Clojure(Script) programming language") (fork) (url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (forks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/forks") (keys_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/teams") (hooks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/hooks") (issue_events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/events{/number}") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/events") (assignees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/assignees{/user}") (branches_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/branches{/branch}") (tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/tags") (blobs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/statuses/{sha}") (languages_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/languages") (stargazers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/stargazers") (contributors_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contributors") (subscribers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscribers") (subscription_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscription") (commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contents/{+path}") (compare_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/merges") (archive_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/downloads") (issues_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues{/number}") (pulls_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls{/number}") (milestones_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/milestones{/number}") (notifications_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels{/name}") (releases_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/releases{/id}") (deployments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/deployments") (created_at . "2008-12-05T17:45:07Z") (updated_at . "2018-10-14T22:28:13Z") (pushed_at . "2018-10-12T13:26:20Z") (git_url . "git://github.com/clojure-emacs/clojure-mode.git") (ssh_url . "git@github.com:clojure-emacs/clojure-mode.git") (clone_url . "https://github.com/clojure-emacs/clojure-mode.git") (svn_url . "https://github.com/clojure-emacs/clojure-mode") (homepage . "") (size . 1435) (stargazers_count . 664) (watchers_count . 664) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 196) (mirror_url) (archived) (open_issues_count . 30) (license) (forks . 196) (open_issues . 30) (watchers . 664) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (network_count . 196) (subscribers_count . 56)) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "dpsutton") (id . 6377293) (node_id . "MDQ6VXNlcjYzNzcyOTM=") (avatar_url . "https://avatars2.githubusercontent.com/u/6377293?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dpsutton") (html_url . "https://github.com/dpsutton") (followers_url . "https://api.github.com/users/dpsutton/followers") (following_url . "https://api.github.com/users/dpsutton/following{/other_user}") (gists_url . "https://api.github.com/users/dpsutton/gists{/gist_id}") (starred_url . "https://api.github.com/users/dpsutton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dpsutton/subscriptions") (organizations_url . "https://api.github.com/users/dpsutton/orgs") (repos_url . "https://api.github.com/users/dpsutton/repos") (events_url . "https://api.github.com/users/dpsutton/events{/privacy}") (received_events_url . "https://api.github.com/users/dpsutton/received_events") (type . "User") (site_admin)))))) ((login . "dpsutton") (id . 6377293) (node_id . "MDQ6VXNlcjYzNzcyOTM=") (avatar_url . "https://avatars2.githubusercontent.com/u/6377293?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dpsutton") (html_url . "https://github.com/dpsutton") (followers_url . "https://api.github.com/users/dpsutton/followers") (following_url . "https://api.github.com/users/dpsutton/following{/other_user}") (gists_url . "https://api.github.com/users/dpsutton/gists{/gist_id}") (starred_url . "https://api.github.com/users/dpsutton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dpsutton/subscriptions") (organizations_url . "https://api.github.com/users/dpsutton/orgs") (repos_url . "https://api.github.com/users/dpsutton/repos") (events_url . "https://api.github.com/users/dpsutton/events{/privacy}") (received_events_url . "https://api.github.com/users/dpsutton/received_events") (type . "User") (site_admin) (name) (company) (blog . "") (location) (email) (hireable) (bio) (public_repos . 37) (public_gists . 2) (followers . 7) (following . 8) (created_at . "2014-01-11T16:22:08Z") (updated_at . "2018-08-07T21:47:46Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "vemv") (id . 1162994) (node_id . "MDQ6VXNlcjExNjI5OTQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/1162994?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vemv") (html_url . "https://github.com/vemv") (followers_url . "https://api.github.com/users/vemv/followers") (following_url . "https://api.github.com/users/vemv/following{/other_user}") (gists_url . "https://api.github.com/users/vemv/gists{/gist_id}") (starred_url . "https://api.github.com/users/vemv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vemv/subscriptions") (organizations_url . "https://api.github.com/users/vemv/orgs") (repos_url . "https://api.github.com/users/vemv/repos") (events_url . "https://api.github.com/users/vemv/events{/privacy}") (received_events_url . "https://api.github.com/users/vemv/received_events") (type . "User") (site_admin)))))) ((login . "vemv") (id . 1162994) (node_id . "MDQ6VXNlcjExNjI5OTQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/1162994?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vemv") (html_url . "https://github.com/vemv") (followers_url . "https://api.github.com/users/vemv/followers") (following_url . "https://api.github.com/users/vemv/following{/other_user}") (gists_url . "https://api.github.com/users/vemv/gists{/gist_id}") (starred_url . "https://api.github.com/users/vemv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vemv/subscriptions") (organizations_url . "https://api.github.com/users/vemv/orgs") (repos_url . "https://api.github.com/users/vemv/repos") (events_url . "https://api.github.com/users/vemv/events{/privacy}") (received_events_url . "https://api.github.com/users/vemv/received_events") (type . "User") (site_admin) (name . "vemv") (company) (blog . "https://www.vemv.net") (location) (email) (hireable) (bio . "while (true);") (public_repos . 45) (public_gists . 2) (followers . 19) (following . 0) (created_at . "2011-10-31T17:17:20Z") (updated_at . "2018-09-27T00:45:37Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)))))) ((login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin) (name . "Bozhidar Batsov") (company . "Toptal (@toptal)") (blog . "http://batsov.com") (location . "Sofia, Bulgaria") (email . "bozhidar@batsov.com") (hireable) (bio . "Hacker. Emacs fanatic. VP of Engineering @toptal. I'm not the best, but I'm pretty good.") (public_repos . 107) (public_gists . 5) (followers . 2962) (following . 4) (created_at . "2009-07-11T12:19:48Z") (updated_at . "2018-10-15T09:45:12Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "DogLooksGood") (id . 11796018) (node_id . "MDQ6VXNlcjExNzk2MDE4") (avatar_url . "https://avatars2.githubusercontent.com/u/11796018?v=4") (gravatar_id . "") (url . "https://api.github.com/users/DogLooksGood") (html_url . "https://github.com/DogLooksGood") (followers_url . "https://api.github.com/users/DogLooksGood/followers") (following_url . "https://api.github.com/users/DogLooksGood/following{/other_user}") (gists_url . "https://api.github.com/users/DogLooksGood/gists{/gist_id}") (starred_url . "https://api.github.com/users/DogLooksGood/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/DogLooksGood/subscriptions") (organizations_url . "https://api.github.com/users/DogLooksGood/orgs") (repos_url . "https://api.github.com/users/DogLooksGood/repos") (events_url . "https://api.github.com/users/DogLooksGood/events{/privacy}") (received_events_url . "https://api.github.com/users/DogLooksGood/received_events") (type . "User") (site_admin)))))) ((login . "DogLooksGood") (id . 11796018) (node_id . "MDQ6VXNlcjExNzk2MDE4") (avatar_url . "https://avatars2.githubusercontent.com/u/11796018?v=4") (gravatar_id . "") (url . "https://api.github.com/users/DogLooksGood") (html_url . "https://github.com/DogLooksGood") (followers_url . "https://api.github.com/users/DogLooksGood/followers") (following_url . "https://api.github.com/users/DogLooksGood/following{/other_user}") (gists_url . "https://api.github.com/users/DogLooksGood/gists{/gist_id}") (starred_url . "https://api.github.com/users/DogLooksGood/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/DogLooksGood/subscriptions") (organizations_url . "https://api.github.com/users/DogLooksGood/orgs") (repos_url . "https://api.github.com/users/DogLooksGood/repos") (events_url . "https://api.github.com/users/DogLooksGood/events{/privacy}") (received_events_url . "https://api.github.com/users/DogLooksGood/received_events") (type . "User") (site_admin) (name . "Tianshu Shi") (company) (blog . "doglooksgood.github.io") (location . "Beijing, China") (email . "doglooksgood@hotmail.com") (hireable) (bio . "Just a Clojurian.") (public_repos . 47) (public_gists . 6) (followers . 40) (following . 4) (created_at . "2015-04-04T10:48:58Z") (updated_at . "2018-10-10T08:09:13Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "alain-picard") (id . 3916016) (node_id . "MDQ6VXNlcjM5MTYwMTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/3916016?v=4") (gravatar_id . "") (url . "https://api.github.com/users/alain-picard") (html_url . "https://github.com/alain-picard") (followers_url . "https://api.github.com/users/alain-picard/followers") (following_url . "https://api.github.com/users/alain-picard/following{/other_user}") (gists_url . "https://api.github.com/users/alain-picard/gists{/gist_id}") (starred_url . "https://api.github.com/users/alain-picard/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/alain-picard/subscriptions") (organizations_url . "https://api.github.com/users/alain-picard/orgs") (repos_url . "https://api.github.com/users/alain-picard/repos") (events_url . "https://api.github.com/users/alain-picard/events{/privacy}") (received_events_url . "https://api.github.com/users/alain-picard/received_events") (type . "User") (site_admin)))))) ((login . "alain-picard") (id . 3916016) (node_id . "MDQ6VXNlcjM5MTYwMTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/3916016?v=4") (gravatar_id . "") (url . "https://api.github.com/users/alain-picard") (html_url . "https://github.com/alain-picard") (followers_url . "https://api.github.com/users/alain-picard/followers") (following_url . "https://api.github.com/users/alain-picard/following{/other_user}") (gists_url . "https://api.github.com/users/alain-picard/gists{/gist_id}") (starred_url . "https://api.github.com/users/alain-picard/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/alain-picard/subscriptions") (organizations_url . "https://api.github.com/users/alain-picard/orgs") (repos_url . "https://api.github.com/users/alain-picard/repos") (events_url . "https://api.github.com/users/alain-picard/events{/privacy}") (received_events_url . "https://api.github.com/users/alain-picard/received_events") (type . "User") (site_admin) (name . "Alain Picard") (company . "NP-Complete") (blog . "https://www.np-complete.com.au") (location . "Sydney") (email) (hireable) (bio) (public_repos . 6) (public_gists . 0) (followers . 3) (following . 0) (created_at . "2013-03-20T02:00:59Z") (updated_at . "2018-06-06T07:49:58Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "codeasone") (id . 22691943) (node_id . "MDQ6VXNlcjIyNjkxOTQz") (avatar_url . "https://avatars1.githubusercontent.com/u/22691943?v=4") (gravatar_id . "") (url . "https://api.github.com/users/codeasone") (html_url . "https://github.com/codeasone") (followers_url . "https://api.github.com/users/codeasone/followers") (following_url . "https://api.github.com/users/codeasone/following{/other_user}") (gists_url . "https://api.github.com/users/codeasone/gists{/gist_id}") (starred_url . "https://api.github.com/users/codeasone/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/codeasone/subscriptions") (organizations_url . "https://api.github.com/users/codeasone/orgs") (repos_url . "https://api.github.com/users/codeasone/repos") (events_url . "https://api.github.com/users/codeasone/events{/privacy}") (received_events_url . "https://api.github.com/users/codeasone/received_events") (type . "User") (site_admin)))))) ((login . "codeasone") (id . 22691943) (node_id . "MDQ6VXNlcjIyNjkxOTQz") (avatar_url . "https://avatars1.githubusercontent.com/u/22691943?v=4") (gravatar_id . "") (url . "https://api.github.com/users/codeasone") (html_url . "https://github.com/codeasone") (followers_url . "https://api.github.com/users/codeasone/followers") (following_url . "https://api.github.com/users/codeasone/following{/other_user}") (gists_url . "https://api.github.com/users/codeasone/gists{/gist_id}") (starred_url . "https://api.github.com/users/codeasone/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/codeasone/subscriptions") (organizations_url . "https://api.github.com/users/codeasone/orgs") (repos_url . "https://api.github.com/users/codeasone/repos") (events_url . "https://api.github.com/users/codeasone/events{/privacy}") (received_events_url . "https://api.github.com/users/codeasone/received_events") (type . "User") (site_admin) (name . "Mark Stuart") (company) (blog . "") (location . "By the seaside. Eastbourne, UK. ") (email . "codeasone@gmail.com") (hireable) (bio . "Roaming clouds wielding Clojure and Ruby with my trusty sidekick Emacs.") (public_repos . 13) (public_gists . 3) (followers . 2) (following . 29) (created_at . "2016-10-07T22:47:53Z") (updated_at . "2018-09-15T17:39:19Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "poernahi") (id . 10459441) (node_id . "MDQ6VXNlcjEwNDU5NDQx") (avatar_url . "https://avatars0.githubusercontent.com/u/10459441?v=4") (gravatar_id . "") (url . "https://api.github.com/users/poernahi") (html_url . "https://github.com/poernahi") (followers_url . "https://api.github.com/users/poernahi/followers") (following_url . "https://api.github.com/users/poernahi/following{/other_user}") (gists_url . "https://api.github.com/users/poernahi/gists{/gist_id}") (starred_url . "https://api.github.com/users/poernahi/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/poernahi/subscriptions") (organizations_url . "https://api.github.com/users/poernahi/orgs") (repos_url . "https://api.github.com/users/poernahi/repos") (events_url . "https://api.github.com/users/poernahi/events{/privacy}") (received_events_url . "https://api.github.com/users/poernahi/received_events") (type . "User") (site_admin)))))) ((login . "poernahi") (id . 10459441) (node_id . "MDQ6VXNlcjEwNDU5NDQx") (avatar_url . "https://avatars0.githubusercontent.com/u/10459441?v=4") (gravatar_id . "") (url . "https://api.github.com/users/poernahi") (html_url . "https://github.com/poernahi") (followers_url . "https://api.github.com/users/poernahi/followers") (following_url . "https://api.github.com/users/poernahi/following{/other_user}") (gists_url . "https://api.github.com/users/poernahi/gists{/gist_id}") (starred_url . "https://api.github.com/users/poernahi/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/poernahi/subscriptions") (organizations_url . "https://api.github.com/users/poernahi/orgs") (repos_url . "https://api.github.com/users/poernahi/repos") (events_url . "https://api.github.com/users/poernahi/events{/privacy}") (received_events_url . "https://api.github.com/users/poernahi/received_events") (type . "User") (site_admin) (name) (company) (blog . "") (location) (email) (hireable) (bio) (public_repos . 29) (public_gists . 0) (followers . 0) (following . 0) (created_at . "2015-01-09T05:23:10Z") (updated_at . "2018-07-24T18:22:09Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "oskarkv") (id . 861064) (node_id . "MDQ6VXNlcjg2MTA2NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/861064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/oskarkv") (html_url . "https://github.com/oskarkv") (followers_url . "https://api.github.com/users/oskarkv/followers") (following_url . "https://api.github.com/users/oskarkv/following{/other_user}") (gists_url . "https://api.github.com/users/oskarkv/gists{/gist_id}") (starred_url . "https://api.github.com/users/oskarkv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/oskarkv/subscriptions") (organizations_url . "https://api.github.com/users/oskarkv/orgs") (repos_url . "https://api.github.com/users/oskarkv/repos") (events_url . "https://api.github.com/users/oskarkv/events{/privacy}") (received_events_url . "https://api.github.com/users/oskarkv/received_events") (type . "User") (site_admin)))))) ((login . "oskarkv") (id . 861064) (node_id . "MDQ6VXNlcjg2MTA2NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/861064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/oskarkv") (html_url . "https://github.com/oskarkv") (followers_url . "https://api.github.com/users/oskarkv/followers") (following_url . "https://api.github.com/users/oskarkv/following{/other_user}") (gists_url . "https://api.github.com/users/oskarkv/gists{/gist_id}") (starred_url . "https://api.github.com/users/oskarkv/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/oskarkv/subscriptions") (organizations_url . "https://api.github.com/users/oskarkv/orgs") (repos_url . "https://api.github.com/users/oskarkv/repos") (events_url . "https://api.github.com/users/oskarkv/events{/privacy}") (received_events_url . "https://api.github.com/users/oskarkv/received_events") (type . "User") (site_admin) (name . "Oskar Kvist") (company) (blog . "") (location . "Sweden") (email . "oskar.kvist@gmail.com") (hireable) (bio) (public_repos . 16) (public_gists . 2) (followers . 1) (following . 0) (created_at . "2011-06-20T07:15:40Z") (updated_at . "2018-07-25T22:47:05Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "phillord") (id . 91386) (node_id . "MDQ6VXNlcjkxMzg2") (avatar_url . "https://avatars3.githubusercontent.com/u/91386?v=4") (gravatar_id . "") (url . "https://api.github.com/users/phillord") (html_url . "https://github.com/phillord") (followers_url . "https://api.github.com/users/phillord/followers") (following_url . "https://api.github.com/users/phillord/following{/other_user}") (gists_url . "https://api.github.com/users/phillord/gists{/gist_id}") (starred_url . "https://api.github.com/users/phillord/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/phillord/subscriptions") (organizations_url . "https://api.github.com/users/phillord/orgs") (repos_url . "https://api.github.com/users/phillord/repos") (events_url . "https://api.github.com/users/phillord/events{/privacy}") (received_events_url . "https://api.github.com/users/phillord/received_events") (type . "User") (site_admin)))))) ((login . "phillord") (id . 91386) (node_id . "MDQ6VXNlcjkxMzg2") (avatar_url . "https://avatars3.githubusercontent.com/u/91386?v=4") (gravatar_id . "") (url . "https://api.github.com/users/phillord") (html_url . "https://github.com/phillord") (followers_url . "https://api.github.com/users/phillord/followers") (following_url . "https://api.github.com/users/phillord/following{/other_user}") (gists_url . "https://api.github.com/users/phillord/gists{/gist_id}") (starred_url . "https://api.github.com/users/phillord/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/phillord/subscriptions") (organizations_url . "https://api.github.com/users/phillord/orgs") (repos_url . "https://api.github.com/users/phillord/repos") (events_url . "https://api.github.com/users/phillord/events{/privacy}") (received_events_url . "https://api.github.com/users/phillord/received_events") (type . "User") (site_admin) (name . "Phil Lord") (company) (blog . "") (location . "Newcastle, UK") (email) (hireable) (bio) (public_repos . 105) (public_gists . 3) (followers . 48) (following . 1) (created_at . "2009-06-03T11:01:39Z") (updated_at . "2018-09-09T09:09:19Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "dottedmag") (id . 16120) (node_id . "MDQ6VXNlcjE2MTIw") (avatar_url . "https://avatars1.githubusercontent.com/u/16120?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dottedmag") (html_url . "https://github.com/dottedmag") (followers_url . "https://api.github.com/users/dottedmag/followers") (following_url . "https://api.github.com/users/dottedmag/following{/other_user}") (gists_url . "https://api.github.com/users/dottedmag/gists{/gist_id}") (starred_url . "https://api.github.com/users/dottedmag/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dottedmag/subscriptions") (organizations_url . "https://api.github.com/users/dottedmag/orgs") (repos_url . "https://api.github.com/users/dottedmag/repos") (events_url . "https://api.github.com/users/dottedmag/events{/privacy}") (received_events_url . "https://api.github.com/users/dottedmag/received_events") (type . "User") (site_admin)))))) ((login . "dottedmag") (id . 16120) (node_id . "MDQ6VXNlcjE2MTIw") (avatar_url . "https://avatars1.githubusercontent.com/u/16120?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dottedmag") (html_url . "https://github.com/dottedmag") (followers_url . "https://api.github.com/users/dottedmag/followers") (following_url . "https://api.github.com/users/dottedmag/following{/other_user}") (gists_url . "https://api.github.com/users/dottedmag/gists{/gist_id}") (starred_url . "https://api.github.com/users/dottedmag/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dottedmag/subscriptions") (organizations_url . "https://api.github.com/users/dottedmag/orgs") (repos_url . "https://api.github.com/users/dottedmag/repos") (events_url . "https://api.github.com/users/dottedmag/events{/privacy}") (received_events_url . "https://api.github.com/users/dottedmag/received_events") (type . "User") (site_admin) (name . "Mikhail Gusarov") (company) (blog . "http://dottedmag.net/") (location . "Malta") (email . "dottedmag@dottedmag.net") (hireable . t) (bio) (public_repos . 66) (public_gists . 20) (followers . 54) (following . 0) (created_at . "2008-07-05T18:19:31Z") (updated_at . "2018-09-22T17:55:32Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)))))) ((login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin) (name . "Radon Rosborough") (company) (blog . "https://intuitiveexplanations.com") (location . "Boulder, CO") (email . "radon.neon@gmail.com") (hireable) (bio . "Junior at Harvey Mudd College studying Computer Science. In my free time, I write package managers, Emacs plugins, and other miscellany.") (public_repos . 107) (public_gists . 0) (followers . 127) (following . 0) (created_at . "2014-02-01T02:54:30Z") (updated_at . "2018-09-20T15:05:46Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "aengelberg") (id . 4122172) (node_id . "MDQ6VXNlcjQxMjIxNzI=") (avatar_url . "https://avatars0.githubusercontent.com/u/4122172?v=4") (gravatar_id . "") (url . "https://api.github.com/users/aengelberg") (html_url . "https://github.com/aengelberg") (followers_url . "https://api.github.com/users/aengelberg/followers") (following_url . "https://api.github.com/users/aengelberg/following{/other_user}") (gists_url . "https://api.github.com/users/aengelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/aengelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/aengelberg/subscriptions") (organizations_url . "https://api.github.com/users/aengelberg/orgs") (repos_url . "https://api.github.com/users/aengelberg/repos") (events_url . "https://api.github.com/users/aengelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/aengelberg/received_events") (type . "User") (site_admin)))))) ((login . "aengelberg") (id . 4122172) (node_id . "MDQ6VXNlcjQxMjIxNzI=") (avatar_url . "https://avatars0.githubusercontent.com/u/4122172?v=4") (gravatar_id . "") (url . "https://api.github.com/users/aengelberg") (html_url . "https://github.com/aengelberg") (followers_url . "https://api.github.com/users/aengelberg/followers") (following_url . "https://api.github.com/users/aengelberg/following{/other_user}") (gists_url . "https://api.github.com/users/aengelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/aengelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/aengelberg/subscriptions") (organizations_url . "https://api.github.com/users/aengelberg/orgs") (repos_url . "https://api.github.com/users/aengelberg/repos") (events_url . "https://api.github.com/users/aengelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/aengelberg/received_events") (type . "User") (site_admin) (name . "Alex Engelberg") (company . "@amperity ") (blog . "https://twitter.com/aengelbro") (location) (email) (hireable) (bio) (public_repos . 32) (public_gists . 7) (followers . 49) (following . 10) (created_at . "2013-04-11T03:57:45Z") (updated_at . "2018-10-09T22:18:02Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "Engelberg") (id . 138571) (node_id . "MDQ6VXNlcjEzODU3MQ==") (avatar_url . "https://avatars2.githubusercontent.com/u/138571?v=4") (gravatar_id . "") (url . "https://api.github.com/users/Engelberg") (html_url . "https://github.com/Engelberg") (followers_url . "https://api.github.com/users/Engelberg/followers") (following_url . "https://api.github.com/users/Engelberg/following{/other_user}") (gists_url . "https://api.github.com/users/Engelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/Engelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/Engelberg/subscriptions") (organizations_url . "https://api.github.com/users/Engelberg/orgs") (repos_url . "https://api.github.com/users/Engelberg/repos") (events_url . "https://api.github.com/users/Engelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/Engelberg/received_events") (type . "User") (site_admin)))))) ((login . "Engelberg") (id . 138571) (node_id . "MDQ6VXNlcjEzODU3MQ==") (avatar_url . "https://avatars2.githubusercontent.com/u/138571?v=4") (gravatar_id . "") (url . "https://api.github.com/users/Engelberg") (html_url . "https://github.com/Engelberg") (followers_url . "https://api.github.com/users/Engelberg/followers") (following_url . "https://api.github.com/users/Engelberg/following{/other_user}") (gists_url . "https://api.github.com/users/Engelberg/gists{/gist_id}") (starred_url . "https://api.github.com/users/Engelberg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/Engelberg/subscriptions") (organizations_url . "https://api.github.com/users/Engelberg/orgs") (repos_url . "https://api.github.com/users/Engelberg/repos") (events_url . "https://api.github.com/users/Engelberg/events{/privacy}") (received_events_url . "https://api.github.com/users/Engelberg/received_events") (type . "User") (site_admin) (name . "Mark Engelberg") (company) (blog . "") (location) (email . "mark.engelberg@gmail.com") (hireable) (bio) (public_repos . 18) (public_gists . 20) (followers . 167) (following . 0) (created_at . "2009-10-12T09:21:55Z") (updated_at . "2017-09-06T00:13:51Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "benedekfazekas") (id . 1003422) (node_id . "MDQ6VXNlcjEwMDM0MjI=") (avatar_url . "https://avatars0.githubusercontent.com/u/1003422?v=4") (gravatar_id . "") (url . "https://api.github.com/users/benedekfazekas") (html_url . "https://github.com/benedekfazekas") (followers_url . "https://api.github.com/users/benedekfazekas/followers") (following_url . "https://api.github.com/users/benedekfazekas/following{/other_user}") (gists_url . "https://api.github.com/users/benedekfazekas/gists{/gist_id}") (starred_url . "https://api.github.com/users/benedekfazekas/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/benedekfazekas/subscriptions") (organizations_url . "https://api.github.com/users/benedekfazekas/orgs") (repos_url . "https://api.github.com/users/benedekfazekas/repos") (events_url . "https://api.github.com/users/benedekfazekas/events{/privacy}") (received_events_url . "https://api.github.com/users/benedekfazekas/received_events") (type . "User") (site_admin)))))) ((login . "benedekfazekas") (id . 1003422) (node_id . "MDQ6VXNlcjEwMDM0MjI=") (avatar_url . "https://avatars0.githubusercontent.com/u/1003422?v=4") (gravatar_id . "") (url . "https://api.github.com/users/benedekfazekas") (html_url . "https://github.com/benedekfazekas") (followers_url . "https://api.github.com/users/benedekfazekas/followers") (following_url . "https://api.github.com/users/benedekfazekas/following{/other_user}") (gists_url . "https://api.github.com/users/benedekfazekas/gists{/gist_id}") (starred_url . "https://api.github.com/users/benedekfazekas/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/benedekfazekas/subscriptions") (organizations_url . "https://api.github.com/users/benedekfazekas/orgs") (repos_url . "https://api.github.com/users/benedekfazekas/repos") (events_url . "https://api.github.com/users/benedekfazekas/events{/privacy}") (received_events_url . "https://api.github.com/users/benedekfazekas/received_events") (type . "User") (site_admin) (name . "Benedek Fazekas") (company) (blog . "http://benedekfazekas.github.io/") (location . "London") (email) (hireable) (bio) (public_repos . 34) (public_gists . 2) (followers . 17) (following . 11) (created_at . "2011-08-25T07:15:44Z") (updated_at . "2018-09-18T11:31:17Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "tanzoniteblack") (id . 1134611) (node_id . "MDQ6VXNlcjExMzQ2MTE=") (avatar_url . "https://avatars1.githubusercontent.com/u/1134611?v=4") (gravatar_id . "") (url . "https://api.github.com/users/tanzoniteblack") (html_url . "https://github.com/tanzoniteblack") (followers_url . "https://api.github.com/users/tanzoniteblack/followers") (following_url . "https://api.github.com/users/tanzoniteblack/following{/other_user}") (gists_url . "https://api.github.com/users/tanzoniteblack/gists{/gist_id}") (starred_url . "https://api.github.com/users/tanzoniteblack/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/tanzoniteblack/subscriptions") (organizations_url . "https://api.github.com/users/tanzoniteblack/orgs") (repos_url . "https://api.github.com/users/tanzoniteblack/repos") (events_url . "https://api.github.com/users/tanzoniteblack/events{/privacy}") (received_events_url . "https://api.github.com/users/tanzoniteblack/received_events") (type . "User") (site_admin)))))) ((login . "tanzoniteblack") (id . 1134611) (node_id . "MDQ6VXNlcjExMzQ2MTE=") (avatar_url . "https://avatars1.githubusercontent.com/u/1134611?v=4") (gravatar_id . "") (url . "https://api.github.com/users/tanzoniteblack") (html_url . "https://github.com/tanzoniteblack") (followers_url . "https://api.github.com/users/tanzoniteblack/followers") (following_url . "https://api.github.com/users/tanzoniteblack/following{/other_user}") (gists_url . "https://api.github.com/users/tanzoniteblack/gists{/gist_id}") (starred_url . "https://api.github.com/users/tanzoniteblack/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/tanzoniteblack/subscriptions") (organizations_url . "https://api.github.com/users/tanzoniteblack/orgs") (repos_url . "https://api.github.com/users/tanzoniteblack/repos") (events_url . "https://api.github.com/users/tanzoniteblack/events{/privacy}") (received_events_url . "https://api.github.com/users/tanzoniteblack/received_events") (type . "User") (site_admin) (name . "Ryan Smith") (company . "Yummly") (blog . "https://wannabe-polyglot.com") (location . "San Mateo, CA") (email . "rnsmith2@gmail.com") (hireable) (bio) (public_repos . 50) (public_gists . 2) (followers . 3) (following . 4) (created_at . "2011-10-18T00:43:04Z") (updated_at . "2018-10-02T12:37:13Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "sooheon") (id . 302945) (node_id . "MDQ6VXNlcjMwMjk0NQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/302945?v=4") (gravatar_id . "") (url . "https://api.github.com/users/sooheon") (html_url . "https://github.com/sooheon") (followers_url . "https://api.github.com/users/sooheon/followers") (following_url . "https://api.github.com/users/sooheon/following{/other_user}") (gists_url . "https://api.github.com/users/sooheon/gists{/gist_id}") (starred_url . "https://api.github.com/users/sooheon/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/sooheon/subscriptions") (organizations_url . "https://api.github.com/users/sooheon/orgs") (repos_url . "https://api.github.com/users/sooheon/repos") (events_url . "https://api.github.com/users/sooheon/events{/privacy}") (received_events_url . "https://api.github.com/users/sooheon/received_events") (type . "User") (site_admin)))))) ((login . "sooheon") (id . 302945) (node_id . "MDQ6VXNlcjMwMjk0NQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/302945?v=4") (gravatar_id . "") (url . "https://api.github.com/users/sooheon") (html_url . "https://github.com/sooheon") (followers_url . "https://api.github.com/users/sooheon/followers") (following_url . "https://api.github.com/users/sooheon/following{/other_user}") (gists_url . "https://api.github.com/users/sooheon/gists{/gist_id}") (starred_url . "https://api.github.com/users/sooheon/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/sooheon/subscriptions") (organizations_url . "https://api.github.com/users/sooheon/orgs") (repos_url . "https://api.github.com/users/sooheon/repos") (events_url . "https://api.github.com/users/sooheon/events{/privacy}") (received_events_url . "https://api.github.com/users/sooheon/received_events") (type . "User") (site_admin) (name . "Sooheon Kim") (company) (blog . "sooheon.org") (location . "Seoul, Korea") (email) (hireable) (bio) (public_repos . 84) (public_gists . 10) (followers . 19) (following . 40) (created_at . "2010-06-11T17:11:13Z") (updated_at . "2018-10-01T05:06:21Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "danielcompton") (id . 811954) (node_id . "MDQ6VXNlcjgxMTk1NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/811954?v=4") (gravatar_id . "") (url . "https://api.github.com/users/danielcompton") (html_url . "https://github.com/danielcompton") (followers_url . "https://api.github.com/users/danielcompton/followers") (following_url . "https://api.github.com/users/danielcompton/following{/other_user}") (gists_url . "https://api.github.com/users/danielcompton/gists{/gist_id}") (starred_url . "https://api.github.com/users/danielcompton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/danielcompton/subscriptions") (organizations_url . "https://api.github.com/users/danielcompton/orgs") (repos_url . "https://api.github.com/users/danielcompton/repos") (events_url . "https://api.github.com/users/danielcompton/events{/privacy}") (received_events_url . "https://api.github.com/users/danielcompton/received_events") (type . "User") (site_admin)))))) ((login . "danielcompton") (id . 811954) (node_id . "MDQ6VXNlcjgxMTk1NA==") (avatar_url . "https://avatars2.githubusercontent.com/u/811954?v=4") (gravatar_id . "") (url . "https://api.github.com/users/danielcompton") (html_url . "https://github.com/danielcompton") (followers_url . "https://api.github.com/users/danielcompton/followers") (following_url . "https://api.github.com/users/danielcompton/following{/other_user}") (gists_url . "https://api.github.com/users/danielcompton/gists{/gist_id}") (starred_url . "https://api.github.com/users/danielcompton/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/danielcompton/subscriptions") (organizations_url . "https://api.github.com/users/danielcompton/orgs") (repos_url . "https://api.github.com/users/danielcompton/repos") (events_url . "https://api.github.com/users/danielcompton/events{/privacy}") (received_events_url . "https://api.github.com/users/danielcompton/received_events") (type . "User") (site_admin) (name . "Daniel Compton") (company . "@deps-app ") (blog . "https://deps.co") (location . "Morrinsville, New Zealand") (email . "desk+github@danielcompton.net") (hireable . t) (bio . "Working on Deps - Private Maven repository hosting") (public_repos . 139) (public_gists . 17) (followers . 112) (following . 34) (created_at . "2011-05-26T12:23:41Z") (updated_at . "2018-10-18T19:04:47Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "expez") (id . 1006557) (node_id . "MDQ6VXNlcjEwMDY1NTc=") (avatar_url . "https://avatars0.githubusercontent.com/u/1006557?v=4") (gravatar_id . "") (url . "https://api.github.com/users/expez") (html_url . "https://github.com/expez") (followers_url . "https://api.github.com/users/expez/followers") (following_url . "https://api.github.com/users/expez/following{/other_user}") (gists_url . "https://api.github.com/users/expez/gists{/gist_id}") (starred_url . "https://api.github.com/users/expez/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/expez/subscriptions") (organizations_url . "https://api.github.com/users/expez/orgs") (repos_url . "https://api.github.com/users/expez/repos") (events_url . "https://api.github.com/users/expez/events{/privacy}") (received_events_url . "https://api.github.com/users/expez/received_events") (type . "User") (site_admin)))))) ((login . "expez") (id . 1006557) (node_id . "MDQ6VXNlcjEwMDY1NTc=") (avatar_url . "https://avatars0.githubusercontent.com/u/1006557?v=4") (gravatar_id . "") (url . "https://api.github.com/users/expez") (html_url . "https://github.com/expez") (followers_url . "https://api.github.com/users/expez/followers") (following_url . "https://api.github.com/users/expez/following{/other_user}") (gists_url . "https://api.github.com/users/expez/gists{/gist_id}") (starred_url . "https://api.github.com/users/expez/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/expez/subscriptions") (organizations_url . "https://api.github.com/users/expez/orgs") (repos_url . "https://api.github.com/users/expez/repos") (events_url . "https://api.github.com/users/expez/events{/privacy}") (received_events_url . "https://api.github.com/users/expez/received_events") (type . "User") (site_admin) (name . "Lars Andersen") (company . "Ardoq ") (blog . "") (location . "Oslo, Norway") (email . "expez@expez.com") (hireable) (bio) (public_repos . 64) (public_gists . 5) (followers . 42) (following . 0) (created_at . "2011-08-26T13:15:27Z") (updated_at . "2018-10-07T08:53:04Z")) (nil :issues (magithub-request (ghubp-get-repos-owner-repo-issues-number (quote ((owner (login . "clojure-emacs")) (name . "clojure-mode"))) (quote ((number . 420)))))) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420") (id . 195882485) (node_id . "MDU6SXNzdWUxOTU4ODI0ODU=") (number . 420) (title . "How to define-clojure-indent on all keywords at once?") (user (login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2016-12-15T18:41:33Z") (updated_at . "2018-09-25T03:24:52Z") (closed_at) (author_association . "NONE") (body . "It looks like `define-clojure-indent` (and `put-clojure-indent`) only allow defining the indentation rules for individual symbols. I wish for *all* keywords to be indented like this:

```
(:keyword
  map)
```

Unfortunately, there seems to be no way to do that except by listing every possible keyword explicitly:

```
(define-clojure-indent
  (:import 0)
  (:require 0)
  ... lots more ...
  (:use 0))
```

The problems with that approach are obvious, I think.

Since this isn't a bug report, I don't think environment information will be helpful (although I install the latest versions of my Emacs packages from MELPA). I am happy to report such information if need be, though.") (closed_by)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues-number-comments (quote ((id . 85632) (node_id . "MDEwOlJlcG9zaXRvcnk4NTYzMg==") (name . "clojure-mode") (full_name . "clojure-emacs/clojure-mode") (private) (owner (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/clojure-emacs/clojure-mode") (description . "Emacs support for the Clojure(Script) programming language") (fork) (url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (forks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/forks") (keys_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/teams") (hooks_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/hooks") (issue_events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/events{/number}") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/events") (assignees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/assignees{/user}") (branches_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/branches{/branch}") (tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/tags") (blobs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/statuses/{sha}") (languages_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/languages") (stargazers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/stargazers") (contributors_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contributors") (subscribers_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscribers") (subscription_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/subscription") (commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/contents/{+path}") (compare_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/merges") (archive_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/downloads") (issues_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues{/number}") (pulls_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/pulls{/number}") (milestones_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/milestones{/number}") (notifications_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels{/name}") (releases_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/releases{/id}") (deployments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/deployments") (created_at . "2008-12-05T17:45:07Z") (updated_at . "2018-10-14T22:28:13Z") (pushed_at . "2018-10-12T13:26:20Z") (git_url . "git://github.com/clojure-emacs/clojure-mode.git") (ssh_url . "git@github.com:clojure-emacs/clojure-mode.git") (clone_url . "https://github.com/clojure-emacs/clojure-mode.git") (svn_url . "https://github.com/clojure-emacs/clojure-mode") (homepage . "") (size . 1435) (stargazers_count . 664) (watchers_count . 664) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 196) (mirror_url) (archived) (open_issues_count . 30) (license) (forks . 196) (open_issues . 30) (watchers . 664) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "clojure-emacs") (id . 5080083) (node_id . "MDEyOk9yZ2FuaXphdGlvbjUwODAwODM=") (avatar_url . "https://avatars0.githubusercontent.com/u/5080083?v=4") (gravatar_id . "") (url . "https://api.github.com/users/clojure-emacs") (html_url . "https://github.com/clojure-emacs") (followers_url . "https://api.github.com/users/clojure-emacs/followers") (following_url . "https://api.github.com/users/clojure-emacs/following{/other_user}") (gists_url . "https://api.github.com/users/clojure-emacs/gists{/gist_id}") (starred_url . "https://api.github.com/users/clojure-emacs/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/clojure-emacs/subscriptions") (organizations_url . "https://api.github.com/users/clojure-emacs/orgs") (repos_url . "https://api.github.com/users/clojure-emacs/repos") (events_url . "https://api.github.com/users/clojure-emacs/events{/privacy}") (received_events_url . "https://api.github.com/users/clojure-emacs/received_events") (type . "Organization") (site_admin)) (network_count . 196) (subscribers_count . 56))) (quote ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (repository_url . "https://api.github.com/repos/clojure-emacs/clojure-mode") (labels_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/labels{/name}") (comments_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/comments") (events_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420/events") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420") (id . 195882485) (node_id . "MDU6SXNzdWUxOTU4ODI0ODU=") (number . 420) (title . "How to define-clojure-indent on all keywords at once?") (user (login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)) (labels ((id . 461481469) (node_id . "MDU6TGFiZWw0NjE0ODE0Njk=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/feature%20request") (name . "feature request") (color . "5319e7") (default)) ((id . 124173234) (node_id . "MDU6TGFiZWwxMjQxNzMyMzQ=") (url . "https://api.github.com/repos/clojure-emacs/clojure-mode/labels/help%20wanted") (name . "help wanted") (color . "009800") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2016-12-15T18:41:33Z") (updated_at . "2018-09-25T03:24:52Z") (closed_at) (author_association . "NONE") (body . "It looks like `define-clojure-indent` (and `put-clojure-indent`) only allow defining the indentation rules for individual symbols. I wish for *all* keywords to be indented like this:

```
(:keyword
  map)
```

Unfortunately, there seems to be no way to do that except by listing every possible keyword explicitly:

```
(define-clojure-indent
  (:import 0)
  (:require 0)
  ... lots more ...
  (:use 0))
```

The problems with that approach are obvious, I think.

Since this isn't a bug report, I don't think environment information will be helpful (although I install the latest versions of my Emacs packages from MELPA). I am happy to report such information if need be, though."))))))) (((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments/267569764") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420#issuecomment-267569764") (issue_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (id . 267569764) (node_id . "MDEyOklzc3VlQ29tbWVudDI2NzU2OTc2NA==") (user (login . "Malabarba") (id . 453029) (node_id . "MDQ6VXNlcjQ1MzAyOQ==") (avatar_url . "https://avatars3.githubusercontent.com/u/453029?v=4") (gravatar_id . "") (url . "https://api.github.com/users/Malabarba") (html_url . "https://github.com/Malabarba") (followers_url . "https://api.github.com/users/Malabarba/followers") (following_url . "https://api.github.com/users/Malabarba/following{/other_user}") (gists_url . "https://api.github.com/users/Malabarba/gists{/gist_id}") (starred_url . "https://api.github.com/users/Malabarba/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/Malabarba/subscriptions") (organizations_url . "https://api.github.com/users/Malabarba/orgs") (repos_url . "https://api.github.com/users/Malabarba/repos") (events_url . "https://api.github.com/users/Malabarba/events{/privacy}") (received_events_url . "https://api.github.com/users/Malabarba/received_events") (type . "User") (site_admin)) (created_at . "2016-12-16T10:58:20Z") (updated_at . "2016-12-16T10:58:20Z") (author_association . "MEMBER") (body . "There's a variable for general indentation behaviour. See https://github.com/clojure-emacs/clojure-mode/blob/master/README.md#indentation-of-function-forms
It looks like what you want is to set it to `always-indent`. 

However, the specific define-clojure-indent still take precedence over the generic variable, so you may still need to do the following for every symbol already defined in clojure-mode.el.

```
(define-clojure-indent
  (:import nil)) 
```")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments/267603644") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420#issuecomment-267603644") (issue_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (id . 267603644) (node_id . "MDEyOklzc3VlQ29tbWVudDI2NzYwMzY0NA==") (user (login . "raxod502") (id . 6559064) (node_id . "MDQ6VXNlcjY1NTkwNjQ=") (avatar_url . "https://avatars1.githubusercontent.com/u/6559064?v=4") (gravatar_id . "") (url . "https://api.github.com/users/raxod502") (html_url . "https://github.com/raxod502") (followers_url . "https://api.github.com/users/raxod502/followers") (following_url . "https://api.github.com/users/raxod502/following{/other_user}") (gists_url . "https://api.github.com/users/raxod502/gists{/gist_id}") (starred_url . "https://api.github.com/users/raxod502/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/raxod502/subscriptions") (organizations_url . "https://api.github.com/users/raxod502/orgs") (repos_url . "https://api.github.com/users/raxod502/repos") (events_url . "https://api.github.com/users/raxod502/events{/privacy}") (received_events_url . "https://api.github.com/users/raxod502/received_events") (type . "User") (site_admin)) (created_at . "2016-12-16T14:20:18Z") (updated_at . "2016-12-16T14:20:18Z") (author_association . "NONE") (body . "I actually want `clojure-indent-style` to be set at `:align-arguments`. The problem is that keywords don't seem to be recognized as function forms—perhaps intentionally?")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments/339778835") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420#issuecomment-339778835") (issue_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (id . 339778835) (node_id . "MDEyOklzc3VlQ29tbWVudDMzOTc3ODgzNQ==") (user (login . "j0ni") (id . 50635) (node_id . "MDQ6VXNlcjUwNjM1") (avatar_url . "https://avatars1.githubusercontent.com/u/50635?v=4") (gravatar_id . "") (url . "https://api.github.com/users/j0ni") (html_url . "https://github.com/j0ni") (followers_url . "https://api.github.com/users/j0ni/followers") (following_url . "https://api.github.com/users/j0ni/following{/other_user}") (gists_url . "https://api.github.com/users/j0ni/gists{/gist_id}") (starred_url . "https://api.github.com/users/j0ni/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/j0ni/subscriptions") (organizations_url . "https://api.github.com/users/j0ni/orgs") (repos_url . "https://api.github.com/users/j0ni/repos") (events_url . "https://api.github.com/users/j0ni/events{/privacy}") (received_events_url . "https://api.github.com/users/j0ni/received_events") (type . "User") (site_admin)) (created_at . "2017-10-26T19:42:43Z") (updated_at . "2017-10-26T19:42:43Z") (author_association . "CONTRIBUTOR") (body . "I also noticed this just today when someone complained on a PR of mine. The difference I believe @raxod502 is talking about can be seen where `:align-arguments` is configured, and (for example) this happens:

```clojure
;; what I expect
(get
  {:my-key \"some value\"} :my-key)

;; what I don't expect
(:my-key
 {:my-key \"some value\"})

;; what I think it should do
(:my-key
  {:my-key \"some value\"})
```

Is this behaviour intended?")) ((url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/comments/424195455") (html_url . "https://github.com/clojure-emacs/clojure-mode/issues/420#issuecomment-424195455") (issue_url . "https://api.github.com/repos/clojure-emacs/clojure-mode/issues/420") (id . 424195455) (node_id . "MDEyOklzc3VlQ29tbWVudDQyNDE5NTQ1NQ==") (user (login . "bbatsov") (id . 103882) (node_id . "MDQ6VXNlcjEwMzg4Mg==") (avatar_url . "https://avatars0.githubusercontent.com/u/103882?v=4") (gravatar_id . "") (url . "https://api.github.com/users/bbatsov") (html_url . "https://github.com/bbatsov") (followers_url . "https://api.github.com/users/bbatsov/followers") (following_url . "https://api.github.com/users/bbatsov/following{/other_user}") (gists_url . "https://api.github.com/users/bbatsov/gists{/gist_id}") (starred_url . "https://api.github.com/users/bbatsov/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/bbatsov/subscriptions") (organizations_url . "https://api.github.com/users/bbatsov/orgs") (repos_url . "https://api.github.com/users/bbatsov/repos") (events_url . "https://api.github.com/users/bbatsov/events{/privacy}") (received_events_url . "https://api.github.com/users/bbatsov/received_events") (type . "User") (site_admin)) (created_at . "2018-09-25T03:24:52Z") (updated_at . "2018-09-25T03:24:52Z") (author_association . "MEMBER") (body . "Nope, we just didn't think of this scenario. PRs welcome!"))) (nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((owner (login . "polymode")) (name . "poly-R"))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 145260372) (node_id . "MDEwOlJlcG9zaXRvcnkxNDUyNjAzNzI=") (name . "poly-R") (full_name . "polymode/poly-R") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/poly-R") (description . "Polymodes for the R language") (fork) (url . "https://api.github.com/repos/polymode/poly-R") (forks_url . "https://api.github.com/repos/polymode/poly-R/forks") (keys_url . "https://api.github.com/repos/polymode/poly-R/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/poly-R/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/poly-R/teams") (hooks_url . "https://api.github.com/repos/polymode/poly-R/hooks") (issue_events_url . "https://api.github.com/repos/polymode/poly-R/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/poly-R/events") (assignees_url . "https://api.github.com/repos/polymode/poly-R/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/poly-R/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/poly-R/tags") (blobs_url . "https://api.github.com/repos/polymode/poly-R/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/poly-R/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/poly-R/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/poly-R/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/poly-R/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/poly-R/languages") (stargazers_url . "https://api.github.com/repos/polymode/poly-R/stargazers") (contributors_url . "https://api.github.com/repos/polymode/poly-R/contributors") (subscribers_url . "https://api.github.com/repos/polymode/poly-R/subscribers") (subscription_url . "https://api.github.com/repos/polymode/poly-R/subscription") (commits_url . "https://api.github.com/repos/polymode/poly-R/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/poly-R/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/poly-R/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/poly-R/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/poly-R/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/poly-R/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/poly-R/merges") (archive_url . "https://api.github.com/repos/polymode/poly-R/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/poly-R/downloads") (issues_url . "https://api.github.com/repos/polymode/poly-R/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/poly-R/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/poly-R/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/poly-R/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/poly-R/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/poly-R/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/poly-R/deployments") (created_at . "2018-08-18T23:55:54Z") (updated_at . "2018-10-17T20:38:35Z") (pushed_at . "2018-10-17T20:38:33Z") (git_url . "git://github.com/polymode/poly-R.git") (ssh_url . "git@github.com:polymode/poly-R.git") (clone_url . "https://github.com/polymode/poly-R.git") (svn_url . "https://github.com/polymode/poly-R") (homepage) (size . 29) (stargazers_count . 6) (watchers_count . 6) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 1) (mirror_url) (archived) (open_issues_count . 0) (license) (forks . 1) (open_issues . 0) (watchers . 6) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 1) (subscribers_count . 1)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues (quote ((id . 145260372) (node_id . "MDEwOlJlcG9zaXRvcnkxNDUyNjAzNzI=") (name . "poly-R") (full_name . "polymode/poly-R") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/poly-R") (description . "Polymodes for the R language") (fork) (url . "https://api.github.com/repos/polymode/poly-R") (forks_url . "https://api.github.com/repos/polymode/poly-R/forks") (keys_url . "https://api.github.com/repos/polymode/poly-R/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/poly-R/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/poly-R/teams") (hooks_url . "https://api.github.com/repos/polymode/poly-R/hooks") (issue_events_url . "https://api.github.com/repos/polymode/poly-R/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/poly-R/events") (assignees_url . "https://api.github.com/repos/polymode/poly-R/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/poly-R/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/poly-R/tags") (blobs_url . "https://api.github.com/repos/polymode/poly-R/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/poly-R/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/poly-R/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/poly-R/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/poly-R/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/poly-R/languages") (stargazers_url . "https://api.github.com/repos/polymode/poly-R/stargazers") (contributors_url . "https://api.github.com/repos/polymode/poly-R/contributors") (subscribers_url . "https://api.github.com/repos/polymode/poly-R/subscribers") (subscription_url . "https://api.github.com/repos/polymode/poly-R/subscription") (commits_url . "https://api.github.com/repos/polymode/poly-R/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/poly-R/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/poly-R/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/poly-R/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/poly-R/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/poly-R/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/poly-R/merges") (archive_url . "https://api.github.com/repos/polymode/poly-R/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/poly-R/downloads") (issues_url . "https://api.github.com/repos/polymode/poly-R/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/poly-R/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/poly-R/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/poly-R/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/poly-R/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/poly-R/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/poly-R/deployments") (created_at . "2018-08-18T23:55:54Z") (updated_at . "2018-10-17T20:38:35Z") (pushed_at . "2018-10-17T20:38:33Z") (git_url . "git://github.com/polymode/poly-R.git") (ssh_url . "git@github.com:polymode/poly-R.git") (clone_url . "https://github.com/polymode/poly-R.git") (svn_url . "https://github.com/polymode/poly-R") (homepage) (size . 29) (stargazers_count . 6) (watchers_count . 6) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 1) (mirror_url) (archived) (open_issues_count . 0) (license) (forks . 1) (open_issues . 0) (watchers . 6) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 1) (subscribers_count . 1))))))) nil (nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((owner (login . "polymode")) (name . "polymode"))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 8677769) (node_id . "MDEwOlJlcG9zaXRvcnk4Njc3NzY5") (name . "polymode") (full_name . "polymode/polymode") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/polymode") (description . "Framework for Multiple Major Modes in Emacs (core library)") (fork) (url . "https://api.github.com/repos/polymode/polymode") (forks_url . "https://api.github.com/repos/polymode/polymode/forks") (keys_url . "https://api.github.com/repos/polymode/polymode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/polymode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/polymode/teams") (hooks_url . "https://api.github.com/repos/polymode/polymode/hooks") (issue_events_url . "https://api.github.com/repos/polymode/polymode/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/polymode/events") (assignees_url . "https://api.github.com/repos/polymode/polymode/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/polymode/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/polymode/tags") (blobs_url . "https://api.github.com/repos/polymode/polymode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/polymode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/polymode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/polymode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/polymode/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/polymode/languages") (stargazers_url . "https://api.github.com/repos/polymode/polymode/stargazers") (contributors_url . "https://api.github.com/repos/polymode/polymode/contributors") (subscribers_url . "https://api.github.com/repos/polymode/polymode/subscribers") (subscription_url . "https://api.github.com/repos/polymode/polymode/subscription") (commits_url . "https://api.github.com/repos/polymode/polymode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/polymode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/polymode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/polymode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/polymode/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/polymode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/polymode/merges") (archive_url . "https://api.github.com/repos/polymode/polymode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/polymode/downloads") (issues_url . "https://api.github.com/repos/polymode/polymode/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/polymode/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/polymode/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/polymode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/polymode/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/polymode/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/polymode/deployments") (created_at . "2013-03-09T23:21:20Z") (updated_at . "2018-10-19T14:20:47Z") (pushed_at . "2018-10-19T14:20:45Z") (git_url . "git://github.com/polymode/polymode.git") (ssh_url . "git@github.com:polymode/polymode.git") (clone_url . "https://github.com/polymode/polymode.git") (svn_url . "https://github.com/polymode/polymode") (homepage . "https://polymode.github.io/") (size . 1505) (stargazers_count . 331) (watchers_count . 331) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 44) (mirror_url) (archived) (open_issues_count . 11) (license) (forks . 44) (open_issues . 11) (watchers . 331) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 44) (subscribers_count . 26)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues (quote ((id . 8677769) (node_id . "MDEwOlJlcG9zaXRvcnk4Njc3NzY5") (name . "polymode") (full_name . "polymode/polymode") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/polymode") (description . "Framework for Multiple Major Modes in Emacs (core library)") (fork) (url . "https://api.github.com/repos/polymode/polymode") (forks_url . "https://api.github.com/repos/polymode/polymode/forks") (keys_url . "https://api.github.com/repos/polymode/polymode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/polymode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/polymode/teams") (hooks_url . "https://api.github.com/repos/polymode/polymode/hooks") (issue_events_url . "https://api.github.com/repos/polymode/polymode/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/polymode/events") (assignees_url . "https://api.github.com/repos/polymode/polymode/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/polymode/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/polymode/tags") (blobs_url . "https://api.github.com/repos/polymode/polymode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/polymode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/polymode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/polymode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/polymode/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/polymode/languages") (stargazers_url . "https://api.github.com/repos/polymode/polymode/stargazers") (contributors_url . "https://api.github.com/repos/polymode/polymode/contributors") (subscribers_url . "https://api.github.com/repos/polymode/polymode/subscribers") (subscription_url . "https://api.github.com/repos/polymode/polymode/subscription") (commits_url . "https://api.github.com/repos/polymode/polymode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/polymode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/polymode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/polymode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/polymode/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/polymode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/polymode/merges") (archive_url . "https://api.github.com/repos/polymode/polymode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/polymode/downloads") (issues_url . "https://api.github.com/repos/polymode/polymode/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/polymode/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/polymode/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/polymode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/polymode/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/polymode/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/polymode/deployments") (created_at . "2013-03-09T23:21:20Z") (updated_at . "2018-10-19T14:20:47Z") (pushed_at . "2018-10-19T14:20:45Z") (git_url . "git://github.com/polymode/polymode.git") (ssh_url . "git@github.com:polymode/polymode.git") (clone_url . "https://github.com/polymode/polymode.git") (svn_url . "https://github.com/polymode/polymode") (homepage . "https://polymode.github.io/") (size . 1505) (stargazers_count . 331) (watchers_count . 331) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 44) (mirror_url) (archived) (open_issues_count . 11) (license) (forks . 44) (open_issues . 11) (watchers . 331) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 44) (subscribers_count . 26))))))) (((url . "https://api.github.com/repos/polymode/polymode/issues/183") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/183/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/183/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/183/events") (html_url . "https://github.com/polymode/polymode/issues/183") (id . 371789220) (node_id . "MDU6SXNzdWUzNzE3ODkyMjA=") (number . 183) (title . "Issue with aggressive-indent-mode") (user (login . "noctuid") (id . 4250696) (node_id . "MDQ6VXNlcjQyNTA2OTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/4250696?v=4") (gravatar_id . "") (url . "https://api.github.com/users/noctuid") (html_url . "https://github.com/noctuid") (followers_url . "https://api.github.com/users/noctuid/followers") (following_url . "https://api.github.com/users/noctuid/following{/other_user}") (gists_url . "https://api.github.com/users/noctuid/gists{/gist_id}") (starred_url . "https://api.github.com/users/noctuid/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/noctuid/subscriptions") (organizations_url . "https://api.github.com/users/noctuid/orgs") (repos_url . "https://api.github.com/users/noctuid/repos") (events_url . "https://api.github.com/users/noctuid/events{/privacy}") (received_events_url . "https://api.github.com/users/noctuid/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2018-10-19T03:05:12Z") (updated_at . "2018-10-19T16:48:27Z") (closed_at) (author_association . "NONE") (body . "With `aggressive-indent-mode` on, I get two spaces of indentation on the first line of a source block (when there should be no indentation).")) ((url . "https://api.github.com/repos/polymode/polymode/issues/180") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/180/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/180/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/180/events") (html_url . "https://github.com/polymode/polymode/issues/180") (id . 369651612) (node_id . "MDU6SXNzdWUzNjk2NTE2MTI=") (number . 180) (title . "polymode for markdown, python3 and noweb syntax") (user (login . "elmbeech") (id . 154283) (node_id . "MDQ6VXNlcjE1NDI4Mw==") (avatar_url . "https://avatars0.githubusercontent.com/u/154283?v=4") (gravatar_id . "") (url . "https://api.github.com/users/elmbeech") (html_url . "https://github.com/elmbeech") (followers_url . "https://api.github.com/users/elmbeech/followers") (following_url . "https://api.github.com/users/elmbeech/following{/other_user}") (gists_url . "https://api.github.com/users/elmbeech/gists{/gist_id}") (starred_url . "https://api.github.com/users/elmbeech/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/elmbeech/subscriptions") (organizations_url . "https://api.github.com/users/elmbeech/orgs") (repos_url . "https://api.github.com/users/elmbeech/repos") (events_url . "https://api.github.com/users/elmbeech/events{/privacy}") (received_events_url . "https://api.github.com/users/elmbeech/received_events") (type . "User") (site_admin)) (labels ((id . 1094457823) (node_id . "MDU6TGFiZWwxMDk0NDU3ODIz") (url . "https://api.github.com/repos/polymode/polymode/labels/feature-request") (name . "feature-request") (color . "9d5cc9") (default)) ((id . 1045687328) (node_id . "MDU6TGFiZWwxMDQ1Njg3MzI4") (url . "https://api.github.com/repos/polymode/polymode/labels/python") (name . "python") (color . "60d850") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 9) (created_at . "2018-10-12T17:56:56Z") (updated_at . "2018-10-17T18:16:05Z") (closed_at) (author_association . "NONE") (body . "I use the python3 pweave library (http://mpastell.com/pweave/usage.html) for literate programming.
pweave uses as text mode markdown, as code mode python3, and it is possible to use noweb literate programming syntax.
For correct syntax highlighting in emacs I aimed to use the polymode library.
But I have trouble to get it running - most probably because I am quit a noob on emacs lisp.

I use emacs version 26.1. And I was able to install polymode from melpa.
Unfortunate there is no pre-existing polymode for
+ host-mode: markdown
+ inner-mode: python3
+ syntax: noweb

So I tried, based on documentation and the existing code, to write my one poly-pweave-mode,
by putting the following lisp code into my .emacs file.
Maybe the .emacs file is the wrong file to put this code?  I am not sure abut that! And I have no idea where to put this code else.

    (require 'polymode-classes)

    (defcustom pm-host/pweave-text
      (pm-host-chunkmode :name \"pweave-text\"
                         :mode 'markdown-mode)
      \"markdown host chunkmode\"
      :group 'poly-hostmodes
      :type 'object)

    (defcustom  pm-inner/pweave-code
       (pm-inner-chunkmode :name \"pweave-code\"
                           :head-matcher \"^[ \\t]*<<\\\\(.*\\\\)>>=\"
                           :tail-matcher \"^[ \\t]*@.*$\"
                           :mode 'python-mode)
       \"noweb static python3 inner chunkmode.\"
       :group 'poly-innermodes
       :type 'object)

     (define-polymode poly-pweave-mode
       :hostmode 'pm-host/pweave-text
       :innermode 'pm-inner/pweave-code)

     (add-to-list 'auto-mode-alist '(\"\\\\.pymd\" . poly-pweave-mode))

This is the error that I get:

    Warning (initialization): An error occurred while loading `/Users/buchere/.emacs':
    Symbol's function definition is void: pm-host-chunkmode
    To ensure normal operation, you should investigate and remove the
    cause of the error in your initialization file.  Start Emacs with
    the `--debug-init' option to view a complete error backtrace.

Starting emacs with --debug-init:

    Debugger entered--Lisp error: (void-function pm-host-chunkmode)
      (pm-host-chunkmode :name \"pweave-text\" :mode 'markdown-mode)
      eval((pm-host-chunkmode :name \"pweave-text\" :mode 'markdown-mode))
      custom-initialize-reset(pm-host/pweave-text (pm-host-chunkmode :name \"pweave-text\" :mode 'markdown-mode))
      custom-declare-variable(pm-host/pweave-text (pm-host-chunkmode :name \"pweave-text\" :mode 'markdown-mode) \"Markdown host chunkmode\" :gr$
      eval-buffer(#<buffer  *load*> nil \"/Users/buchere/.emacs\" nil t)  ; Reading at buffer position 2403
      load-with-code-conversion(\"/Users/buchere/.emacs\" \"/Users/buchere/.emacs\" t t)
      load(\"~/.emacs\" t t)
      #f(compiled-function () #<bytecode 0x4009eced>)()
      command-line()
      normal-top-level()

I hoped someone could give me a hint what I do wrong on stack overflow,
but no one answered my question ...
+ https://stackoverflow.com/questions/52489905/emacs-polymode-for-markdown-and-python

So I hope to get a hint about what I have to do to get this running.
I would really appreciate. 
Thank you, Elmar Bucher")) ((url . "https://api.github.com/repos/polymode/polymode/issues/165") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/165/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/165/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/165/events") (html_url . "https://github.com/polymode/polymode/issues/165") (id . 356194399) (node_id . "MDU6SXNzdWUzNTYxOTQzOTk=") (number . 165) (title . "Handling navigation commands") (user (login . "noctuid") (id . 4250696) (node_id . "MDQ6VXNlcjQyNTA2OTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/4250696?v=4") (gravatar_id . "") (url . "https://api.github.com/users/noctuid") (html_url . "https://github.com/noctuid") (followers_url . "https://api.github.com/users/noctuid/followers") (following_url . "https://api.github.com/users/noctuid/following{/other_user}") (gists_url . "https://api.github.com/users/noctuid/gists{/gist_id}") (starred_url . "https://api.github.com/users/noctuid/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/noctuid/subscriptions") (organizations_url . "https://api.github.com/users/noctuid/orgs") (repos_url . "https://api.github.com/users/noctuid/repos") (events_url . "https://api.github.com/users/noctuid/events{/privacy}") (received_events_url . "https://api.github.com/users/noctuid/received_events") (type . "User") (site_admin)) (labels ((id . 31307461) (node_id . "MDU6TGFiZWwzMTMwNzQ2MQ==") (url . "https://api.github.com/repos/polymode/polymode/labels/enhancement") (name . "enhancement") (color . "84b6eb") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 8) (created_at . "2018-09-01T11:12:15Z") (updated_at . "2018-10-19T02:43:11Z") (closed_at) (author_association . "NONE") (body . "Regarding comment in #164.

> The most straightforward way to tackle that is to advise those function to operate within narrowed chunks.

I don't recall this being the case before, but maybe I never tried it. I wouldn't mind if the commands only moved between chunks, but it seems like that would be hard to do and would only make sense for some commands. 

I think this is a bigger issue about the best way to handle navigation commands. A lot of navigation commands should work across chunks, but not all do. For example, `worf-goto` and `counsel-org-goto` do not work in elisp blocks. I have a command in my init that calls `polymode-previous-chunk` if `worf-goto` fails. Maybe it would be nice if polymode provided two commands for advising navigation commands that did something like this:

1. Move outside of source block to a host chunk if necessary before running command (for commands like `counsel-org-goto`)
2. Prevent command from doing anything if it tries to move outside the current chunk (for lispy commands)")) ((url . "https://api.github.com/repos/polymode/polymode/issues/153") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/153/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/153/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/153/events") (html_url . "https://github.com/polymode/polymode/issues/153") (id . 309950888) (node_id . "MDU6SXNzdWUzMDk5NTA4ODg=") (number . 153) (title . "Guidance for python mode") (user (login . "fgregg") (id . 536941) (node_id . "MDQ6VXNlcjUzNjk0MQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/536941?v=4") (gravatar_id . "") (url . "https://api.github.com/users/fgregg") (html_url . "https://github.com/fgregg") (followers_url . "https://api.github.com/users/fgregg/followers") (following_url . "https://api.github.com/users/fgregg/following{/other_user}") (gists_url . "https://api.github.com/users/fgregg/gists{/gist_id}") (starred_url . "https://api.github.com/users/fgregg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/fgregg/subscriptions") (organizations_url . "https://api.github.com/users/fgregg/orgs") (repos_url . "https://api.github.com/users/fgregg/repos") (events_url . "https://api.github.com/users/fgregg/events{/privacy}") (received_events_url . "https://api.github.com/users/fgregg/received_events") (type . "User") (site_admin)) (labels ((id . 1094457823) (node_id . "MDU6TGFiZWwxMDk0NDU3ODIz") (url . "https://api.github.com/repos/polymode/polymode/labels/feature-request") (name . "feature-request") (color . "9d5cc9") (default)) ((id . 1045687328) (node_id . "MDU6TGFiZWwxMDQ1Njg3MzI4") (url . "https://api.github.com/repos/polymode/polymode/labels/python") (name . "python") (color . "60d850") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 9) (created_at . "2018-03-30T01:28:49Z") (updated_at . "2018-10-17T12:53:59Z") (closed_at) (author_association . "NONE") (body . "Hi @vspinu, thank you so much for this great tool!

Using this [stack overflow recipe for python+latex](https://emacs.stackexchange.com/questions/20437/polymode-with-python-and-latex-mode), I've gotten mainly set up for a good mode.

The only thing lacking, is being able to smoothly send python code chunks to the interpreter. 

[python-x](https://github.com/wavexx/python-x.el) seems like it's going in the right direction, but I wonder if you have seen another setup?")) ((url . "https://api.github.com/repos/polymode/polymode/issues/149") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/149/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/149/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/149/events") (html_url . "https://github.com/polymode/polymode/pull/149") (id . 294124467) (node_id . "MDExOlB1bGxSZXF1ZXN0MTY2OTY5MDQ2") (number . 149) (title . "Better integration of poly-org-mode with sub-modes") (user (login . "vapniks") (id . 174330) (node_id . "MDQ6VXNlcjE3NDMzMA==") (avatar_url . "https://avatars1.githubusercontent.com/u/174330?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vapniks") (html_url . "https://github.com/vapniks") (followers_url . "https://api.github.com/users/vapniks/followers") (following_url . "https://api.github.com/users/vapniks/following{/other_user}") (gists_url . "https://api.github.com/users/vapniks/gists{/gist_id}") (starred_url . "https://api.github.com/users/vapniks/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vapniks/subscriptions") (organizations_url . "https://api.github.com/users/vapniks/orgs") (repos_url . "https://api.github.com/users/vapniks/repos") (events_url . "https://api.github.com/users/vapniks/events{/privacy}") (received_events_url . "https://api.github.com/users/vapniks/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-02-03T16:33:02Z") (updated_at . "2018-10-19T14:20:45Z") (closed_at) (author_association . "NONE") (pull_request (url . "https://api.github.com/repos/polymode/polymode/pulls/149") (html_url . "https://github.com/polymode/polymode/pull/149") (diff_url . "https://github.com/polymode/polymode/pull/149.diff") (patch_url . "https://github.com/polymode/polymode/pull/149.patch")) (body . "With this code `poly-org-mode` sub-mode buffers can now find their respective process buffers so we can use commands such as `ess-switch-to-inferior-or-script-buffer` and `ess-eval-region-or-line-and-step` from within the `org-mode` buffer.")) ((url . "https://api.github.com/repos/polymode/polymode/issues/146") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/146/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/146/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/146/events") (html_url . "https://github.com/polymode/polymode/issues/146") (id . 285707097) (node_id . "MDU6SXNzdWUyODU3MDcwOTc=") (number . 146) (title . "Consider publishing this package on GNU Elpa") (user (login . "rekado") (id . 47740) (node_id . "MDQ6VXNlcjQ3NzQw") (avatar_url . "https://avatars3.githubusercontent.com/u/47740?v=4") (gravatar_id . "") (url . "https://api.github.com/users/rekado") (html_url . "https://github.com/rekado") (followers_url . "https://api.github.com/users/rekado/followers") (following_url . "https://api.github.com/users/rekado/following{/other_user}") (gists_url . "https://api.github.com/users/rekado/gists{/gist_id}") (starred_url . "https://api.github.com/users/rekado/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/rekado/subscriptions") (organizations_url . "https://api.github.com/users/rekado/orgs") (repos_url . "https://api.github.com/users/rekado/repos") (events_url . "https://api.github.com/users/rekado/events{/privacy}") (received_events_url . "https://api.github.com/users/rekado/received_events") (type . "User") (site_admin)) (labels ((id . 1014457456) (node_id . "MDU6TGFiZWwxMDE0NDU3NDU2") (url . "https://api.github.com/repos/polymode/polymode/labels/emacs") (name . "emacs") (color . "bfdadc") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-01-03T14:46:25Z") (updated_at . "2018-08-12T16:22:34Z") (closed_at) (author_association . "NONE") (body . "Hi,

please consider publishing this package on GNU Elpa, so that it can be treated as part of GNU Emacs.")) ((url . "https://api.github.com/repos/polymode/polymode/issues/144") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/144/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/144/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/144/events") (html_url . "https://github.com/polymode/polymode/issues/144") (id . 283712738) (node_id . "MDU6SXNzdWUyODM3MTI3Mzg=") (number . 144) (title . "Support for rmarkdown document powered by shiny (rmarkdown::run)") (user (login . "dickoa") (id . 500140) (node_id . "MDQ6VXNlcjUwMDE0MA==") (avatar_url . "https://avatars1.githubusercontent.com/u/500140?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dickoa") (html_url . "https://github.com/dickoa") (followers_url . "https://api.github.com/users/dickoa/followers") (following_url . "https://api.github.com/users/dickoa/following{/other_user}") (gists_url . "https://api.github.com/users/dickoa/gists{/gist_id}") (starred_url . "https://api.github.com/users/dickoa/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dickoa/subscriptions") (organizations_url . "https://api.github.com/users/dickoa/orgs") (repos_url . "https://api.github.com/users/dickoa/repos") (events_url . "https://api.github.com/users/dickoa/events{/privacy}") (received_events_url . "https://api.github.com/users/dickoa/received_events") (type . "User") (site_admin)) (labels ((id . 1014468474) (node_id . "MDU6TGFiZWwxMDE0NDY4NDc0") (url . "https://api.github.com/repos/polymode/polymode/labels/R") (name . "R") (color . "022d82") (default)) ((id . 31307461) (node_id . "MDU6TGFiZWwzMTMwNzQ2MQ==") (url . "https://api.github.com/repos/polymode/polymode/labels/enhancement") (name . "enhancement") (color . "84b6eb") (default . t)) ((id . 1014468553) (node_id . "MDU6TGFiZWwxMDE0NDY4NTUz") (url . "https://api.github.com/repos/polymode/polymode/labels/markdown") (name . "markdown") (color . "ea818b") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 2) (created_at . "2017-12-20T22:19:29Z") (updated_at . "2018-10-17T20:47:27Z") (closed_at) (author_association . "NONE") (body . "Hi,

Thanks again for Polymode, it's really great to be able to process Rmd file in Emacs.
I would like know if there's a way to have a new exporter or to tell the exporter to call `rmarkdown::run` instead of `rmarkdown::render` when we `runtime: shiny` in yml header of a document (e.g flexdashboard).

It is documented here: http://rmarkdown.rstudio.com/authoring_shiny.html

Particularly this quote from the link above

> If you’re not using RStudio, or want to run the document in-process for troubleshooting, you can also run the document from the console using the `rmarkdown::run` function.

Thanks again and let me know how to help.

Best,
")) ((url . "https://api.github.com/repos/polymode/polymode/issues/131") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/131/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/131/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/131/events") (html_url . "https://github.com/polymode/polymode/issues/131") (id . 222004204) (node_id . "MDU6SXNzdWUyMjIwMDQyMDQ=") (number . 131) (title . "default exporter?") (user (login . "mhlinder") (id . 2993637) (node_id . "MDQ6VXNlcjI5OTM2Mzc=") (avatar_url . "https://avatars0.githubusercontent.com/u/2993637?v=4") (gravatar_id . "") (url . "https://api.github.com/users/mhlinder") (html_url . "https://github.com/mhlinder") (followers_url . "https://api.github.com/users/mhlinder/followers") (following_url . "https://api.github.com/users/mhlinder/following{/other_user}") (gists_url . "https://api.github.com/users/mhlinder/gists{/gist_id}") (starred_url . "https://api.github.com/users/mhlinder/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/mhlinder/subscriptions") (organizations_url . "https://api.github.com/users/mhlinder/orgs") (repos_url . "https://api.github.com/users/mhlinder/repos") (events_url . "https://api.github.com/users/mhlinder/events{/privacy}") (received_events_url . "https://api.github.com/users/mhlinder/received_events") (type . "User") (site_admin)) (labels ((id . 31307461) (node_id . "MDU6TGFiZWwzMTMwNzQ2MQ==") (url . "https://api.github.com/repos/polymode/polymode/labels/enhancement") (name . "enhancement") (color . "84b6eb") (default . t)) ((id . 1014489448) (node_id . "MDU6TGFiZWwxMDE0NDg5NDQ4") (url . "https://api.github.com/repos/polymode/polymode/labels/exporter") (name . "exporter") (color . "8b23ed") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2017-04-16T11:03:34Z") (updated_at . "2018-08-12T16:22:33Z") (closed_at) (author_association . "NONE") (body . "Is there a variable to set a default exporter?

eg, I basically always want to generate a PDF using Rmarkdown-ESS...")) ((url . "https://api.github.com/repos/polymode/polymode/issues/128") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/128/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/128/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/128/events") (html_url . "https://github.com/polymode/polymode/issues/128") (id . 212540608) (node_id . "MDU6SXNzdWUyMTI1NDA2MDg=") (number . 128) (title . "Collapse/fold code blocks?") (user (login . "brendan-r") (id . 3510374) (node_id . "MDQ6VXNlcjM1MTAzNzQ=") (avatar_url . "https://avatars0.githubusercontent.com/u/3510374?v=4") (gravatar_id . "") (url . "https://api.github.com/users/brendan-r") (html_url . "https://github.com/brendan-r") (followers_url . "https://api.github.com/users/brendan-r/followers") (following_url . "https://api.github.com/users/brendan-r/following{/other_user}") (gists_url . "https://api.github.com/users/brendan-r/gists{/gist_id}") (starred_url . "https://api.github.com/users/brendan-r/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/brendan-r/subscriptions") (organizations_url . "https://api.github.com/users/brendan-r/orgs") (repos_url . "https://api.github.com/users/brendan-r/repos") (events_url . "https://api.github.com/users/brendan-r/events{/privacy}") (received_events_url . "https://api.github.com/users/brendan-r/received_events") (type . "User") (site_admin)) (labels ((id . 31307461) (node_id . "MDU6TGFiZWwzMTMwNzQ2MQ==") (url . "https://api.github.com/repos/polymode/polymode/labels/enhancement") (name . "enhancement") (color . "84b6eb") (default . t))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2017-03-07T19:54:24Z") (updated_at . "2018-08-12T16:22:33Z") (closed_at) (author_association . "NONE") (body . "Hello there,

First, thanks for polymode!

Is it possible to collapse/fold code-blocks, like `markdown-mode` allows with headings? Rstudio currently does this, for a reference implementation.

The use-case is that it can get very hairy to proof-read or even to navigate Rmd documents which have a lot of code in them. It's a very useful feature in Rstudio. 

P.S. do let me know if this is best asked in `markdown-mode`.

Best,

Brendan")) ((url . "https://api.github.com/repos/polymode/polymode/issues/34") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/34/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/34/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/34/events") (html_url . "https://github.com/polymode/polymode/issues/34") (id . 39885922) (node_id . "MDU6SXNzdWUzOTg4NTkyMg==") (number . 34) (title . "Hide implementation buffers from buffer switching") (user (login . "doublep") (id . 231301) (node_id . "MDQ6VXNlcjIzMTMwMQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/231301?v=4") (gravatar_id . "") (url . "https://api.github.com/users/doublep") (html_url . "https://github.com/doublep") (followers_url . "https://api.github.com/users/doublep/followers") (following_url . "https://api.github.com/users/doublep/following{/other_user}") (gists_url . "https://api.github.com/users/doublep/gists{/gist_id}") (starred_url . "https://api.github.com/users/doublep/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/doublep/subscriptions") (organizations_url . "https://api.github.com/users/doublep/orgs") (repos_url . "https://api.github.com/users/doublep/repos") (events_url . "https://api.github.com/users/doublep/events{/privacy}") (received_events_url . "https://api.github.com/users/doublep/received_events") (type . "User") (site_admin)) (labels ((id . 1014497082) (node_id . "MDU6TGFiZWwxMDE0NDk3MDgy") (url . "https://api.github.com/repos/polymode/polymode/labels/UI") (name . "UI") (color . "3d7be5") (default))) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 4) (created_at . "2014-08-09T13:59:54Z") (updated_at . "2018-09-02T18:04:35Z") (closed_at) (author_association . "NONE") (body . "I use Ido for buffer switching. If I open a file with my self-defined multimode, Ido shows three buffers for that file:
- file.jsp
- file.jsp[js]
- file.jsp[fundamental]

This makes switching to other buffers with similar name more complicated, because minibuffer is full of stuff I don't care about (i.e. when typing 'fi' I don't want to see 'file.jsp[js]' or 'file.jsp[fundamental] because it is implementation details, instead I'd like to see 'file2.jsp', for example).

I'm not sure if it is possible to generally hide buffers from Ido or other buffer switching at all. If it is not possible at the moment, it would help to at least _name_ them in such a way I would not see them.
")) ((url . "https://api.github.com/repos/polymode/polymode/issues/17") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/17/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/17/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/17/events") (html_url . "https://github.com/polymode/polymode/pull/17") (id . 27218302) (node_id . "MDExOlB1bGxSZXF1ZXN0MTIzNDg5NzY=") (number . 17) (title . "Implement AsciiDoc+R") (user (login . "kbroman") (id . 53972) (node_id . "MDQ6VXNlcjUzOTcy") (avatar_url . "https://avatars1.githubusercontent.com/u/53972?v=4") (gravatar_id . "") (url . "https://api.github.com/users/kbroman") (html_url . "https://github.com/kbroman") (followers_url . "https://api.github.com/users/kbroman/followers") (following_url . "https://api.github.com/users/kbroman/following{/other_user}") (gists_url . "https://api.github.com/users/kbroman/gists{/gist_id}") (starred_url . "https://api.github.com/users/kbroman/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/kbroman/subscriptions") (organizations_url . "https://api.github.com/users/kbroman/orgs") (repos_url . "https://api.github.com/users/kbroman/repos") (events_url . "https://api.github.com/users/kbroman/events{/privacy}") (received_events_url . "https://api.github.com/users/kbroman/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 0) (created_at . "2014-02-09T07:30:01Z") (updated_at . "2018-10-19T14:20:45Z") (closed_at) (author_association . "NONE") (pull_request (url . "https://api.github.com/repos/polymode/polymode/pulls/17") (html_url . "https://github.com/polymode/polymode/pull/17") (diff_url . "https://github.com/polymode/polymode/pull/17.diff") (patch_url . "https://github.com/polymode/polymode/pull/17.patch")) (body . "- Expecting a file with extension .Rasciidoc or .Rtxt
- Code chunks are as defined in KnitR for AsciiDoc:
   //begin.rcode
   //end.rcode
- Also added two examples in tests/, based on the .Rmd examples
"))) (nil :repo-demographics (or (magithub-request (ghubp-get-repos-owner-repo (quote ((id . 8677769) (node_id . "MDEwOlJlcG9zaXRvcnk4Njc3NzY5") (name . "polymode") (full_name . "polymode/polymode") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/polymode") (description . "Framework for Multiple Major Modes in Emacs (core library)") (fork) (url . "https://api.github.com/repos/polymode/polymode") (forks_url . "https://api.github.com/repos/polymode/polymode/forks") (keys_url . "https://api.github.com/repos/polymode/polymode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/polymode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/polymode/teams") (hooks_url . "https://api.github.com/repos/polymode/polymode/hooks") (issue_events_url . "https://api.github.com/repos/polymode/polymode/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/polymode/events") (assignees_url . "https://api.github.com/repos/polymode/polymode/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/polymode/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/polymode/tags") (blobs_url . "https://api.github.com/repos/polymode/polymode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/polymode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/polymode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/polymode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/polymode/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/polymode/languages") (stargazers_url . "https://api.github.com/repos/polymode/polymode/stargazers") (contributors_url . "https://api.github.com/repos/polymode/polymode/contributors") (subscribers_url . "https://api.github.com/repos/polymode/polymode/subscribers") (subscription_url . "https://api.github.com/repos/polymode/polymode/subscription") (commits_url . "https://api.github.com/repos/polymode/polymode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/polymode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/polymode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/polymode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/polymode/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/polymode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/polymode/merges") (archive_url . "https://api.github.com/repos/polymode/polymode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/polymode/downloads") (issues_url . "https://api.github.com/repos/polymode/polymode/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/polymode/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/polymode/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/polymode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/polymode/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/polymode/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/polymode/deployments") (created_at . "2013-03-09T23:21:20Z") (updated_at . "2018-10-19T14:20:47Z") (pushed_at . "2018-10-19T14:20:45Z") (git_url . "git://github.com/polymode/polymode.git") (ssh_url . "git@github.com:polymode/polymode.git") (clone_url . "https://github.com/polymode/polymode.git") (svn_url . "https://github.com/polymode/polymode") (homepage . "https://polymode.github.io/") (size . 1505) (stargazers_count . 331) (watchers_count . 331) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 44) (mirror_url) (archived) (open_issues_count . 11) (license) (forks . 44) (open_issues . 11) (watchers . 331) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 44) (subscribers_count . 26))))) (and (not (magithub--api-available-p)) sparse-repo))) ((id . 8677769) (node_id . "MDEwOlJlcG9zaXRvcnk4Njc3NzY5") (name . "polymode") (full_name . "polymode/polymode") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/polymode") (description . "Framework for Multiple Major Modes in Emacs (core library)") (fork) (url . "https://api.github.com/repos/polymode/polymode") (forks_url . "https://api.github.com/repos/polymode/polymode/forks") (keys_url . "https://api.github.com/repos/polymode/polymode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/polymode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/polymode/teams") (hooks_url . "https://api.github.com/repos/polymode/polymode/hooks") (issue_events_url . "https://api.github.com/repos/polymode/polymode/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/polymode/events") (assignees_url . "https://api.github.com/repos/polymode/polymode/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/polymode/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/polymode/tags") (blobs_url . "https://api.github.com/repos/polymode/polymode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/polymode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/polymode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/polymode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/polymode/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/polymode/languages") (stargazers_url . "https://api.github.com/repos/polymode/polymode/stargazers") (contributors_url . "https://api.github.com/repos/polymode/polymode/contributors") (subscribers_url . "https://api.github.com/repos/polymode/polymode/subscribers") (subscription_url . "https://api.github.com/repos/polymode/polymode/subscription") (commits_url . "https://api.github.com/repos/polymode/polymode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/polymode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/polymode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/polymode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/polymode/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/polymode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/polymode/merges") (archive_url . "https://api.github.com/repos/polymode/polymode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/polymode/downloads") (issues_url . "https://api.github.com/repos/polymode/polymode/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/polymode/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/polymode/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/polymode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/polymode/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/polymode/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/polymode/deployments") (created_at . "2013-03-09T23:21:20Z") (updated_at . "2018-10-19T14:20:47Z") (pushed_at . "2018-10-19T14:20:45Z") (git_url . "git://github.com/polymode/polymode.git") (ssh_url . "git@github.com:polymode/polymode.git") (clone_url . "https://github.com/polymode/polymode.git") (svn_url . "https://github.com/polymode/polymode") (homepage . "https://polymode.github.io/") (size . 1505) (stargazers_count . 331) (watchers_count . 331) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 44) (mirror_url) (archived) (open_issues_count . 11) (license) (forks . 44) (open_issues . 11) (watchers . 331) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 44) (subscribers_count . 26)) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "vapniks") (id . 174330) (node_id . "MDQ6VXNlcjE3NDMzMA==") (avatar_url . "https://avatars1.githubusercontent.com/u/174330?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vapniks") (html_url . "https://github.com/vapniks") (followers_url . "https://api.github.com/users/vapniks/followers") (following_url . "https://api.github.com/users/vapniks/following{/other_user}") (gists_url . "https://api.github.com/users/vapniks/gists{/gist_id}") (starred_url . "https://api.github.com/users/vapniks/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vapniks/subscriptions") (organizations_url . "https://api.github.com/users/vapniks/orgs") (repos_url . "https://api.github.com/users/vapniks/repos") (events_url . "https://api.github.com/users/vapniks/events{/privacy}") (received_events_url . "https://api.github.com/users/vapniks/received_events") (type . "User") (site_admin)))))) ((login . "vapniks") (id . 174330) (node_id . "MDQ6VXNlcjE3NDMzMA==") (avatar_url . "https://avatars1.githubusercontent.com/u/174330?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vapniks") (html_url . "https://github.com/vapniks") (followers_url . "https://api.github.com/users/vapniks/followers") (following_url . "https://api.github.com/users/vapniks/following{/other_user}") (gists_url . "https://api.github.com/users/vapniks/gists{/gist_id}") (starred_url . "https://api.github.com/users/vapniks/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vapniks/subscriptions") (organizations_url . "https://api.github.com/users/vapniks/orgs") (repos_url . "https://api.github.com/users/vapniks/repos") (events_url . "https://api.github.com/users/vapniks/events{/privacy}") (received_events_url . "https://api.github.com/users/vapniks/received_events") (type . "User") (site_admin) (name) (company) (blog . "") (location) (email) (hireable . t) (bio) (public_repos . 112) (public_gists . 11) (followers . 25) (following . 17) (created_at . "2009-12-30T19:44:46Z") (updated_at . "2018-08-06T09:08:21Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "kbroman") (id . 53972) (node_id . "MDQ6VXNlcjUzOTcy") (avatar_url . "https://avatars1.githubusercontent.com/u/53972?v=4") (gravatar_id . "") (url . "https://api.github.com/users/kbroman") (html_url . "https://github.com/kbroman") (followers_url . "https://api.github.com/users/kbroman/followers") (following_url . "https://api.github.com/users/kbroman/following{/other_user}") (gists_url . "https://api.github.com/users/kbroman/gists{/gist_id}") (starred_url . "https://api.github.com/users/kbroman/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/kbroman/subscriptions") (organizations_url . "https://api.github.com/users/kbroman/orgs") (repos_url . "https://api.github.com/users/kbroman/repos") (events_url . "https://api.github.com/users/kbroman/events{/privacy}") (received_events_url . "https://api.github.com/users/kbroman/received_events") (type . "User") (site_admin)))))) ((login . "kbroman") (id . 53972) (node_id . "MDQ6VXNlcjUzOTcy") (avatar_url . "https://avatars1.githubusercontent.com/u/53972?v=4") (gravatar_id . "") (url . "https://api.github.com/users/kbroman") (html_url . "https://github.com/kbroman") (followers_url . "https://api.github.com/users/kbroman/followers") (following_url . "https://api.github.com/users/kbroman/following{/other_user}") (gists_url . "https://api.github.com/users/kbroman/gists{/gist_id}") (starred_url . "https://api.github.com/users/kbroman/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/kbroman/subscriptions") (organizations_url . "https://api.github.com/users/kbroman/orgs") (repos_url . "https://api.github.com/users/kbroman/repos") (events_url . "https://api.github.com/users/kbroman/events{/privacy}") (received_events_url . "https://api.github.com/users/kbroman/received_events") (type . "User") (site_admin) (name . "Karl Broman") (company . "University of Wisconsin-Madison") (blog . "https://kbroman.org") (location . "Madison, Wisconsin, USA") (email . "kbroman@gmail.com") (hireable) (bio . "Professor in Dept of Biostatistics & Medical Informatics at UW–Madison. Applied statistician working on statistical genomics.") (public_repos . 309) (public_gists . 60) (followers . 806) (following . 32) (created_at . "2009-02-12T16:17:13Z") (updated_at . "2018-10-17T19:10:23Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "noctuid") (id . 4250696) (node_id . "MDQ6VXNlcjQyNTA2OTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/4250696?v=4") (gravatar_id . "") (url . "https://api.github.com/users/noctuid") (html_url . "https://github.com/noctuid") (followers_url . "https://api.github.com/users/noctuid/followers") (following_url . "https://api.github.com/users/noctuid/following{/other_user}") (gists_url . "https://api.github.com/users/noctuid/gists{/gist_id}") (starred_url . "https://api.github.com/users/noctuid/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/noctuid/subscriptions") (organizations_url . "https://api.github.com/users/noctuid/orgs") (repos_url . "https://api.github.com/users/noctuid/repos") (events_url . "https://api.github.com/users/noctuid/events{/privacy}") (received_events_url . "https://api.github.com/users/noctuid/received_events") (type . "User") (site_admin)))))) ((login . "noctuid") (id . 4250696) (node_id . "MDQ6VXNlcjQyNTA2OTY=") (avatar_url . "https://avatars1.githubusercontent.com/u/4250696?v=4") (gravatar_id . "") (url . "https://api.github.com/users/noctuid") (html_url . "https://github.com/noctuid") (followers_url . "https://api.github.com/users/noctuid/followers") (following_url . "https://api.github.com/users/noctuid/following{/other_user}") (gists_url . "https://api.github.com/users/noctuid/gists{/gist_id}") (starred_url . "https://api.github.com/users/noctuid/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/noctuid/subscriptions") (organizations_url . "https://api.github.com/users/noctuid/orgs") (repos_url . "https://api.github.com/users/noctuid/repos") (events_url . "https://api.github.com/users/noctuid/events{/privacy}") (received_events_url . "https://api.github.com/users/noctuid/received_events") (type . "User") (site_admin) (name . "Fox Kiester") (company) (blog . "") (location . "Atlanta, GA") (email) (hireable) (bio) (public_repos . 46) (public_gists . 0) (followers . 97) (following . 59) (created_at . "2013-04-25T01:05:48Z") (updated_at . "2018-09-05T12:56:56Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "elmbeech") (id . 154283) (node_id . "MDQ6VXNlcjE1NDI4Mw==") (avatar_url . "https://avatars0.githubusercontent.com/u/154283?v=4") (gravatar_id . "") (url . "https://api.github.com/users/elmbeech") (html_url . "https://github.com/elmbeech") (followers_url . "https://api.github.com/users/elmbeech/followers") (following_url . "https://api.github.com/users/elmbeech/following{/other_user}") (gists_url . "https://api.github.com/users/elmbeech/gists{/gist_id}") (starred_url . "https://api.github.com/users/elmbeech/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/elmbeech/subscriptions") (organizations_url . "https://api.github.com/users/elmbeech/orgs") (repos_url . "https://api.github.com/users/elmbeech/repos") (events_url . "https://api.github.com/users/elmbeech/events{/privacy}") (received_events_url . "https://api.github.com/users/elmbeech/received_events") (type . "User") (site_admin)))))) ((login . "elmbeech") (id . 154283) (node_id . "MDQ6VXNlcjE1NDI4Mw==") (avatar_url . "https://avatars0.githubusercontent.com/u/154283?v=4") (gravatar_id . "") (url . "https://api.github.com/users/elmbeech") (html_url . "https://github.com/elmbeech") (followers_url . "https://api.github.com/users/elmbeech/followers") (following_url . "https://api.github.com/users/elmbeech/following{/other_user}") (gists_url . "https://api.github.com/users/elmbeech/gists{/gist_id}") (starred_url . "https://api.github.com/users/elmbeech/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/elmbeech/subscriptions") (organizations_url . "https://api.github.com/users/elmbeech/orgs") (repos_url . "https://api.github.com/users/elmbeech/repos") (events_url . "https://api.github.com/users/elmbeech/events{/privacy}") (received_events_url . "https://api.github.com/users/elmbeech/received_events") (type . "User") (site_admin) (name . "elmar bucher") (company) (blog . "https://gitlab.com/biotransistor") (location . "Suomi Finland") (email . "buchere@ohsu.edu") (hireable) (bio) (public_repos . 9) (public_gists . 0) (followers . 8) (following . 6) (created_at . "2009-11-17T09:40:47Z") (updated_at . "2018-10-17T18:12:49Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "fgregg") (id . 536941) (node_id . "MDQ6VXNlcjUzNjk0MQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/536941?v=4") (gravatar_id . "") (url . "https://api.github.com/users/fgregg") (html_url . "https://github.com/fgregg") (followers_url . "https://api.github.com/users/fgregg/followers") (following_url . "https://api.github.com/users/fgregg/following{/other_user}") (gists_url . "https://api.github.com/users/fgregg/gists{/gist_id}") (starred_url . "https://api.github.com/users/fgregg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/fgregg/subscriptions") (organizations_url . "https://api.github.com/users/fgregg/orgs") (repos_url . "https://api.github.com/users/fgregg/repos") (events_url . "https://api.github.com/users/fgregg/events{/privacy}") (received_events_url . "https://api.github.com/users/fgregg/received_events") (type . "User") (site_admin)))))) ((login . "fgregg") (id . 536941) (node_id . "MDQ6VXNlcjUzNjk0MQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/536941?v=4") (gravatar_id . "") (url . "https://api.github.com/users/fgregg") (html_url . "https://github.com/fgregg") (followers_url . "https://api.github.com/users/fgregg/followers") (following_url . "https://api.github.com/users/fgregg/following{/other_user}") (gists_url . "https://api.github.com/users/fgregg/gists{/gist_id}") (starred_url . "https://api.github.com/users/fgregg/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/fgregg/subscriptions") (organizations_url . "https://api.github.com/users/fgregg/orgs") (repos_url . "https://api.github.com/users/fgregg/repos") (events_url . "https://api.github.com/users/fgregg/events{/privacy}") (received_events_url . "https://api.github.com/users/fgregg/received_events") (type . "User") (site_admin) (name . "Forest Gregg") (company . "University of Chicago, Department of Sociology") (blog . "http://bunkum.us") (location . "Chicago, IL") (email) (hireable) (bio) (public_repos . 129) (public_gists . 34) (followers . 173) (following . 143) (created_at . "2010-12-26T14:26:33Z") (updated_at . "2018-10-16T15:52:51Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "rekado") (id . 47740) (node_id . "MDQ6VXNlcjQ3NzQw") (avatar_url . "https://avatars3.githubusercontent.com/u/47740?v=4") (gravatar_id . "") (url . "https://api.github.com/users/rekado") (html_url . "https://github.com/rekado") (followers_url . "https://api.github.com/users/rekado/followers") (following_url . "https://api.github.com/users/rekado/following{/other_user}") (gists_url . "https://api.github.com/users/rekado/gists{/gist_id}") (starred_url . "https://api.github.com/users/rekado/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/rekado/subscriptions") (organizations_url . "https://api.github.com/users/rekado/orgs") (repos_url . "https://api.github.com/users/rekado/repos") (events_url . "https://api.github.com/users/rekado/events{/privacy}") (received_events_url . "https://api.github.com/users/rekado/received_events") (type . "User") (site_admin)))))) ((login . "rekado") (id . 47740) (node_id . "MDQ6VXNlcjQ3NzQw") (avatar_url . "https://avatars3.githubusercontent.com/u/47740?v=4") (gravatar_id . "") (url . "https://api.github.com/users/rekado") (html_url . "https://github.com/rekado") (followers_url . "https://api.github.com/users/rekado/followers") (following_url . "https://api.github.com/users/rekado/following{/other_user}") (gists_url . "https://api.github.com/users/rekado/gists{/gist_id}") (starred_url . "https://api.github.com/users/rekado/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/rekado/subscriptions") (organizations_url . "https://api.github.com/users/rekado/orgs") (repos_url . "https://api.github.com/users/rekado/repos") (events_url . "https://api.github.com/users/rekado/events{/privacy}") (received_events_url . "https://api.github.com/users/rekado/received_events") (type . "User") (site_admin) (name . "rekado") (company) (blog . "http://elephly.net") (location . "The landmass of earth") (email) (hireable) (bio) (public_repos . 8) (public_gists . 0) (followers . 72) (following . 11) (created_at . "2009-01-19T18:14:06Z") (updated_at . "2018-08-11T17:31:46Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "dickoa") (id . 500140) (node_id . "MDQ6VXNlcjUwMDE0MA==") (avatar_url . "https://avatars1.githubusercontent.com/u/500140?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dickoa") (html_url . "https://github.com/dickoa") (followers_url . "https://api.github.com/users/dickoa/followers") (following_url . "https://api.github.com/users/dickoa/following{/other_user}") (gists_url . "https://api.github.com/users/dickoa/gists{/gist_id}") (starred_url . "https://api.github.com/users/dickoa/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dickoa/subscriptions") (organizations_url . "https://api.github.com/users/dickoa/orgs") (repos_url . "https://api.github.com/users/dickoa/repos") (events_url . "https://api.github.com/users/dickoa/events{/privacy}") (received_events_url . "https://api.github.com/users/dickoa/received_events") (type . "User") (site_admin)))))) ((login . "dickoa") (id . 500140) (node_id . "MDQ6VXNlcjUwMDE0MA==") (avatar_url . "https://avatars1.githubusercontent.com/u/500140?v=4") (gravatar_id . "") (url . "https://api.github.com/users/dickoa") (html_url . "https://github.com/dickoa") (followers_url . "https://api.github.com/users/dickoa/followers") (following_url . "https://api.github.com/users/dickoa/following{/other_user}") (gists_url . "https://api.github.com/users/dickoa/gists{/gist_id}") (starred_url . "https://api.github.com/users/dickoa/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/dickoa/subscriptions") (organizations_url . "https://api.github.com/users/dickoa/orgs") (repos_url . "https://api.github.com/users/dickoa/repos") (events_url . "https://api.github.com/users/dickoa/events{/privacy}") (received_events_url . "https://api.github.com/users/dickoa/received_events") (type . "User") (site_admin) (name . "Ahmadou Dicko") (company) (blog . "https://ahmadoudicko.com") (location . "Dakar, Senegal") (email . "mail@ahmadoudicko.com") (hireable) (bio . "Statistical consultant, Lab manager and Data hacker for the OCHA Center for Humanitarian Data") (public_repos . 72) (public_gists . 5) (followers . 44) (following . 35) (created_at . "2010-11-28T14:03:54Z") (updated_at . "2018-10-15T18:43:46Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "mhlinder") (id . 2993637) (node_id . "MDQ6VXNlcjI5OTM2Mzc=") (avatar_url . "https://avatars0.githubusercontent.com/u/2993637?v=4") (gravatar_id . "") (url . "https://api.github.com/users/mhlinder") (html_url . "https://github.com/mhlinder") (followers_url . "https://api.github.com/users/mhlinder/followers") (following_url . "https://api.github.com/users/mhlinder/following{/other_user}") (gists_url . "https://api.github.com/users/mhlinder/gists{/gist_id}") (starred_url . "https://api.github.com/users/mhlinder/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/mhlinder/subscriptions") (organizations_url . "https://api.github.com/users/mhlinder/orgs") (repos_url . "https://api.github.com/users/mhlinder/repos") (events_url . "https://api.github.com/users/mhlinder/events{/privacy}") (received_events_url . "https://api.github.com/users/mhlinder/received_events") (type . "User") (site_admin)))))) ((login . "mhlinder") (id . 2993637) (node_id . "MDQ6VXNlcjI5OTM2Mzc=") (avatar_url . "https://avatars0.githubusercontent.com/u/2993637?v=4") (gravatar_id . "") (url . "https://api.github.com/users/mhlinder") (html_url . "https://github.com/mhlinder") (followers_url . "https://api.github.com/users/mhlinder/followers") (following_url . "https://api.github.com/users/mhlinder/following{/other_user}") (gists_url . "https://api.github.com/users/mhlinder/gists{/gist_id}") (starred_url . "https://api.github.com/users/mhlinder/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/mhlinder/subscriptions") (organizations_url . "https://api.github.com/users/mhlinder/orgs") (repos_url . "https://api.github.com/users/mhlinder/repos") (events_url . "https://api.github.com/users/mhlinder/events{/privacy}") (received_events_url . "https://api.github.com/users/mhlinder/received_events") (type . "User") (site_admin) (name . "M. Henry Linder") (company) (blog . "http://mhlinder.com") (location) (email) (hireable) (bio) (public_repos . 40) (public_gists . 1) (followers . 18) (following . 17) (created_at . "2012-12-08T03:16:09Z") (updated_at . "2018-09-21T13:31:42Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "brendan-r") (id . 3510374) (node_id . "MDQ6VXNlcjM1MTAzNzQ=") (avatar_url . "https://avatars0.githubusercontent.com/u/3510374?v=4") (gravatar_id . "") (url . "https://api.github.com/users/brendan-r") (html_url . "https://github.com/brendan-r") (followers_url . "https://api.github.com/users/brendan-r/followers") (following_url . "https://api.github.com/users/brendan-r/following{/other_user}") (gists_url . "https://api.github.com/users/brendan-r/gists{/gist_id}") (starred_url . "https://api.github.com/users/brendan-r/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/brendan-r/subscriptions") (organizations_url . "https://api.github.com/users/brendan-r/orgs") (repos_url . "https://api.github.com/users/brendan-r/repos") (events_url . "https://api.github.com/users/brendan-r/events{/privacy}") (received_events_url . "https://api.github.com/users/brendan-r/received_events") (type . "User") (site_admin)))))) ((login . "brendan-r") (id . 3510374) (node_id . "MDQ6VXNlcjM1MTAzNzQ=") (avatar_url . "https://avatars0.githubusercontent.com/u/3510374?v=4") (gravatar_id . "") (url . "https://api.github.com/users/brendan-r") (html_url . "https://github.com/brendan-r") (followers_url . "https://api.github.com/users/brendan-r/followers") (following_url . "https://api.github.com/users/brendan-r/following{/other_user}") (gists_url . "https://api.github.com/users/brendan-r/gists{/gist_id}") (starred_url . "https://api.github.com/users/brendan-r/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/brendan-r/subscriptions") (organizations_url . "https://api.github.com/users/brendan-r/orgs") (repos_url . "https://api.github.com/users/brendan-r/repos") (events_url . "https://api.github.com/users/brendan-r/events{/privacy}") (received_events_url . "https://api.github.com/users/brendan-r/received_events") (type . "User") (site_admin) (name . "Brendan Rocks") (company) (blog . "https://brendanrocks.com") (location . "San Francisco | London") (email) (hireable . t) (bio) (public_repos . 19) (public_gists . 3) (followers . 32) (following . 61) (created_at . "2013-02-08T10:56:35Z") (updated_at . "2018-10-09T00:53:01Z")) (nil :user-demographics (magithub-request (ghubp-get-users-username (quote ((login . "doublep") (id . 231301) (node_id . "MDQ6VXNlcjIzMTMwMQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/231301?v=4") (gravatar_id . "") (url . "https://api.github.com/users/doublep") (html_url . "https://github.com/doublep") (followers_url . "https://api.github.com/users/doublep/followers") (following_url . "https://api.github.com/users/doublep/following{/other_user}") (gists_url . "https://api.github.com/users/doublep/gists{/gist_id}") (starred_url . "https://api.github.com/users/doublep/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/doublep/subscriptions") (organizations_url . "https://api.github.com/users/doublep/orgs") (repos_url . "https://api.github.com/users/doublep/repos") (events_url . "https://api.github.com/users/doublep/events{/privacy}") (received_events_url . "https://api.github.com/users/doublep/received_events") (type . "User") (site_admin)))))) ((login . "doublep") (id . 231301) (node_id . "MDQ6VXNlcjIzMTMwMQ==") (avatar_url . "https://avatars0.githubusercontent.com/u/231301?v=4") (gravatar_id . "") (url . "https://api.github.com/users/doublep") (html_url . "https://github.com/doublep") (followers_url . "https://api.github.com/users/doublep/followers") (following_url . "https://api.github.com/users/doublep/following{/other_user}") (gists_url . "https://api.github.com/users/doublep/gists{/gist_id}") (starred_url . "https://api.github.com/users/doublep/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/doublep/subscriptions") (organizations_url . "https://api.github.com/users/doublep/orgs") (repos_url . "https://api.github.com/users/doublep/repos") (events_url . "https://api.github.com/users/doublep/events{/privacy}") (received_events_url . "https://api.github.com/users/doublep/received_events") (type . "User") (site_admin) (name . "Paul Pogonyshev") (company) (blog . "") (location) (email . "pogonyshev@gmail.com") (hireable) (bio) (public_repos . 8) (public_gists . 0) (followers . 3) (following . 0) (created_at . "2010-03-27T00:12:12Z") (updated_at . "2018-09-12T20:39:12Z")) (nil :issues (magithub-request (ghubp-get-repos-owner-repo-issues-number (quote ((owner (login . "polymode")) (name . "polymode"))) (quote ((number . 149)))))) ((url . "https://api.github.com/repos/polymode/polymode/issues/149") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/149/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/149/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/149/events") (html_url . "https://github.com/polymode/polymode/pull/149") (id . 294124467) (node_id . "MDExOlB1bGxSZXF1ZXN0MTY2OTY5MDQ2") (number . 149) (title . "Better integration of poly-org-mode with sub-modes") (user (login . "vapniks") (id . 174330) (node_id . "MDQ6VXNlcjE3NDMzMA==") (avatar_url . "https://avatars1.githubusercontent.com/u/174330?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vapniks") (html_url . "https://github.com/vapniks") (followers_url . "https://api.github.com/users/vapniks/followers") (following_url . "https://api.github.com/users/vapniks/following{/other_user}") (gists_url . "https://api.github.com/users/vapniks/gists{/gist_id}") (starred_url . "https://api.github.com/users/vapniks/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vapniks/subscriptions") (organizations_url . "https://api.github.com/users/vapniks/orgs") (repos_url . "https://api.github.com/users/vapniks/repos") (events_url . "https://api.github.com/users/vapniks/events{/privacy}") (received_events_url . "https://api.github.com/users/vapniks/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-02-03T16:33:02Z") (updated_at . "2018-10-19T14:20:45Z") (closed_at) (author_association . "NONE") (pull_request (url . "https://api.github.com/repos/polymode/polymode/pulls/149") (html_url . "https://github.com/polymode/polymode/pull/149") (diff_url . "https://github.com/polymode/polymode/pull/149.diff") (patch_url . "https://github.com/polymode/polymode/pull/149.patch")) (body . "With this code `poly-org-mode` sub-mode buffers can now find their respective process buffers so we can use commands such as `ess-switch-to-inferior-or-script-buffer` and `ess-eval-region-or-line-and-step` from within the `org-mode` buffer.") (closed_by)) (nil :issues (magithub-request (ghubp-unpaginate (ghubp-get-repos-owner-repo-issues-number-comments (quote ((id . 8677769) (node_id . "MDEwOlJlcG9zaXRvcnk4Njc3NzY5") (name . "polymode") (full_name . "polymode/polymode") (private) (owner (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (html_url . "https://github.com/polymode/polymode") (description . "Framework for Multiple Major Modes in Emacs (core library)") (fork) (url . "https://api.github.com/repos/polymode/polymode") (forks_url . "https://api.github.com/repos/polymode/polymode/forks") (keys_url . "https://api.github.com/repos/polymode/polymode/keys{/key_id}") (collaborators_url . "https://api.github.com/repos/polymode/polymode/collaborators{/collaborator}") (teams_url . "https://api.github.com/repos/polymode/polymode/teams") (hooks_url . "https://api.github.com/repos/polymode/polymode/hooks") (issue_events_url . "https://api.github.com/repos/polymode/polymode/issues/events{/number}") (events_url . "https://api.github.com/repos/polymode/polymode/events") (assignees_url . "https://api.github.com/repos/polymode/polymode/assignees{/user}") (branches_url . "https://api.github.com/repos/polymode/polymode/branches{/branch}") (tags_url . "https://api.github.com/repos/polymode/polymode/tags") (blobs_url . "https://api.github.com/repos/polymode/polymode/git/blobs{/sha}") (git_tags_url . "https://api.github.com/repos/polymode/polymode/git/tags{/sha}") (git_refs_url . "https://api.github.com/repos/polymode/polymode/git/refs{/sha}") (trees_url . "https://api.github.com/repos/polymode/polymode/git/trees{/sha}") (statuses_url . "https://api.github.com/repos/polymode/polymode/statuses/{sha}") (languages_url . "https://api.github.com/repos/polymode/polymode/languages") (stargazers_url . "https://api.github.com/repos/polymode/polymode/stargazers") (contributors_url . "https://api.github.com/repos/polymode/polymode/contributors") (subscribers_url . "https://api.github.com/repos/polymode/polymode/subscribers") (subscription_url . "https://api.github.com/repos/polymode/polymode/subscription") (commits_url . "https://api.github.com/repos/polymode/polymode/commits{/sha}") (git_commits_url . "https://api.github.com/repos/polymode/polymode/git/commits{/sha}") (comments_url . "https://api.github.com/repos/polymode/polymode/comments{/number}") (issue_comment_url . "https://api.github.com/repos/polymode/polymode/issues/comments{/number}") (contents_url . "https://api.github.com/repos/polymode/polymode/contents/{+path}") (compare_url . "https://api.github.com/repos/polymode/polymode/compare/{base}...{head}") (merges_url . "https://api.github.com/repos/polymode/polymode/merges") (archive_url . "https://api.github.com/repos/polymode/polymode/{archive_format}{/ref}") (downloads_url . "https://api.github.com/repos/polymode/polymode/downloads") (issues_url . "https://api.github.com/repos/polymode/polymode/issues{/number}") (pulls_url . "https://api.github.com/repos/polymode/polymode/pulls{/number}") (milestones_url . "https://api.github.com/repos/polymode/polymode/milestones{/number}") (notifications_url . "https://api.github.com/repos/polymode/polymode/notifications{?since,all,participating}") (labels_url . "https://api.github.com/repos/polymode/polymode/labels{/name}") (releases_url . "https://api.github.com/repos/polymode/polymode/releases{/id}") (deployments_url . "https://api.github.com/repos/polymode/polymode/deployments") (created_at . "2013-03-09T23:21:20Z") (updated_at . "2018-10-19T14:20:47Z") (pushed_at . "2018-10-19T14:20:45Z") (git_url . "git://github.com/polymode/polymode.git") (ssh_url . "git@github.com:polymode/polymode.git") (clone_url . "https://github.com/polymode/polymode.git") (svn_url . "https://github.com/polymode/polymode") (homepage . "https://polymode.github.io/") (size . 1505) (stargazers_count . 331) (watchers_count . 331) (language . "Emacs Lisp") (has_issues . t) (has_projects . t) (has_downloads . t) (has_wiki . t) (has_pages) (forks_count . 44) (mirror_url) (archived) (open_issues_count . 11) (license) (forks . 44) (open_issues . 11) (watchers . 331) (default_branch . "master") (permissions (admin) (push) (pull . t)) (organization (login . "polymode") (id . 42320621) (node_id . "MDEyOk9yZ2FuaXphdGlvbjQyMzIwNjIx") (avatar_url . "https://avatars2.githubusercontent.com/u/42320621?v=4") (gravatar_id . "") (url . "https://api.github.com/users/polymode") (html_url . "https://github.com/polymode") (followers_url . "https://api.github.com/users/polymode/followers") (following_url . "https://api.github.com/users/polymode/following{/other_user}") (gists_url . "https://api.github.com/users/polymode/gists{/gist_id}") (starred_url . "https://api.github.com/users/polymode/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/polymode/subscriptions") (organizations_url . "https://api.github.com/users/polymode/orgs") (repos_url . "https://api.github.com/users/polymode/repos") (events_url . "https://api.github.com/users/polymode/events{/privacy}") (received_events_url . "https://api.github.com/users/polymode/received_events") (type . "Organization") (site_admin)) (network_count . 44) (subscribers_count . 26))) (quote ((url . "https://api.github.com/repos/polymode/polymode/issues/149") (repository_url . "https://api.github.com/repos/polymode/polymode") (labels_url . "https://api.github.com/repos/polymode/polymode/issues/149/labels{/name}") (comments_url . "https://api.github.com/repos/polymode/polymode/issues/149/comments") (events_url . "https://api.github.com/repos/polymode/polymode/issues/149/events") (html_url . "https://github.com/polymode/polymode/pull/149") (id . 294124467) (node_id . "MDExOlB1bGxSZXF1ZXN0MTY2OTY5MDQ2") (number . 149) (title . "Better integration of poly-org-mode with sub-modes") (user (login . "vapniks") (id . 174330) (node_id . "MDQ6VXNlcjE3NDMzMA==") (avatar_url . "https://avatars1.githubusercontent.com/u/174330?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vapniks") (html_url . "https://github.com/vapniks") (followers_url . "https://api.github.com/users/vapniks/followers") (following_url . "https://api.github.com/users/vapniks/following{/other_user}") (gists_url . "https://api.github.com/users/vapniks/gists{/gist_id}") (starred_url . "https://api.github.com/users/vapniks/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vapniks/subscriptions") (organizations_url . "https://api.github.com/users/vapniks/orgs") (repos_url . "https://api.github.com/users/vapniks/repos") (events_url . "https://api.github.com/users/vapniks/events{/privacy}") (received_events_url . "https://api.github.com/users/vapniks/received_events") (type . "User") (site_admin)) (labels) (state . "open") (locked) (assignee) (assignees) (milestone) (comments . 1) (created_at . "2018-02-03T16:33:02Z") (updated_at . "2018-10-19T14:20:45Z") (closed_at) (author_association . "NONE") (pull_request (url . "https://api.github.com/repos/polymode/polymode/pulls/149") (html_url . "https://github.com/polymode/polymode/pull/149") (diff_url . "https://github.com/polymode/polymode/pull/149.diff") (patch_url . "https://github.com/polymode/polymode/pull/149.patch")) (body . "With this code `poly-org-mode` sub-mode buffers can now find their respective process buffers so we can use commands such as `ess-switch-to-inferior-or-script-buffer` and `ess-eval-region-or-line-and-step` from within the `org-mode` buffer."))))))) (((url . "https://api.github.com/repos/polymode/polymode/issues/comments/430594875") (html_url . "https://github.com/polymode/polymode/pull/149#issuecomment-430594875") (issue_url . "https://api.github.com/repos/polymode/polymode/issues/149") (id . 430594875) (node_id . "MDEyOklzc3VlQ29tbWVudDQzMDU5NDg3NQ==") (user (login . "vspinu") (id . 1363467) (node_id . "MDQ6VXNlcjEzNjM0Njc=") (avatar_url . "https://avatars3.githubusercontent.com/u/1363467?v=4") (gravatar_id . "") (url . "https://api.github.com/users/vspinu") (html_url . "https://github.com/vspinu") (followers_url . "https://api.github.com/users/vspinu/followers") (following_url . "https://api.github.com/users/vspinu/following{/other_user}") (gists_url . "https://api.github.com/users/vspinu/gists{/gist_id}") (starred_url . "https://api.github.com/users/vspinu/starred{/owner}{/repo}") (subscriptions_url . "https://api.github.com/users/vspinu/subscriptions") (organizations_url . "https://api.github.com/users/vspinu/orgs") (repos_url . "https://api.github.com/users/vspinu/repos") (events_url . "https://api.github.com/users/vspinu/events{/privacy}") (received_events_url . "https://api.github.com/users/vspinu/received_events") (type . "User") (site_admin)) (created_at . "2018-10-17T11:40:13Z") (updated_at . "2018-10-17T11:40:13Z") (author_association . "COLLABORATOR") (body . "Hi @vapniks, 

Are you still interested in this? polymode has been rewritten recently and poly-org now lives in its own repo. 

Regarding outline levels and regexp I think this makes sense for all modes not just org-mode.  So I already included those in `pm-move-vars-from-base`. 

Regarding the second part, it should go to `poly-org` and I would like to see a few minor changes. First is use `&rest args` in the argument. Second, use `with-eval-after-load` for the advices. ")))))